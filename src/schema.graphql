type Query {
    info: String!
    guideFeed: [Guide!]!
    petFeed: [Pet!]!
}

type Mutation {
    # User content and auth mutation
    postGuide(title: String!, body: String!): Guide!
    signup(email: String!, password: String!, handle: String!): AuthPayload!
    login(email: String, password: String!, handle: String): AuthPayload!
}

type Guide {
    id: ID!
    title: String!
    body: String!
    owner: User!
}

type User {
    id: ID!
    handle: String!
    email: String!
    guides: [Guide!]!
}

type AuthPayload {
    token: String
    user: User
}

# IN-GAME TYPES USE FOR MOSTLY QUERYING AND READ-ONLY

type Class {
    id: ID!
    name: Hero!
    description: String!
    weapon: String!
    skills: [Skill!]!
}

type Skill {
    id: ID!
    name: String!
    description: String!
    skill_type: [SkillType!]!
    combat_type: [CombatType!]!
    energy: Int!
    location: Map
    class: Class
}

type MonsterSkill {
    id: ID!
    name: String
    description: String
    skill_type: [SkillType!]!
    combat_type: [CombatType!]!
    energy: Int
}

type Boss {
    id: ID!
    name: String!
    element_one: Element
    element_one_value: Int
    element_two: Element 
    element_two_value: Int
    map_found: [Map!]!
    continent_found: [Continent!]!
}


type Map {
    id: ID!
    name: String
    total_stage: Int
    native_boss: [Boss!]!
    obtainable_skills: [Skill!]!
    bosses_found: [BossStruct!]!
    previous_map: String
    next_map: String
    pet_unlock: [Pet!]!
    continent: Continent!
    imageurl: String

}

type Continent {
    id: ID!
    name: String!
    bosses: [Boss!]!
    maps: [Map!]!
    next_continent: String
    previous_continent: String
}

type BossStruct {
    id: ID!
    map: Map!
    boss: Boss!
    AtkSpd: Float
    skills: [MonsterSkill!]!
}

type Element {
    id: ID!
    name: ElementType
    weakness: ElementType
    effective: ElementType
}

type Pet {
  id: ID!
  name: String!
  element_one: Element
  element_one_value: Int
  element_two: Element
  element_two_value: Int
  talent_cap: Float
  type: PetType
  favorite_food: Food
  area: Map
  imageurl: String
}

type Food {
  id: ID!
  name: String!
  pet_favorite: [Pet!]!
  buff: Stat
  imageurl: String
}

# OPTIONS FOR IN-GAME TYPES FIELDs

enum SkillType {
  UNKNOWN
  ACTIVE
  PASSIVE
}

enum CombatType {
  UNKNOWN
  BUFF
  DAMAGE
  HEAL
  CONTINUOUS
  OVER_TIME
  AREA_OF_EFFECT
  TARGET
  CROWD_CONTROL
  SUMMON
  DEBUFF
  DISPELL
  RANDOM
  ABSORB
  STEALTH
  PASSIVE
}

enum ElementType {
  FIRE
  LIGHTNING
  FROST
  EARTH
}

enum PetType {
  ASSIST
  SYMBIOSIS
  ATTACK
  GUARDIAN
}

enum Hero {
  WARLOCK
  SHAMAN
  ASSASSIN
  HUNTER
  DRUID
  MAGE
  GLADIATOR
  WARRIOR
}

enum Stat {
  ATTACK
  HP
  ARMOR
  ATK_SPD
  HIT
  EVASION
  CRIT
  TENACITY
  BLOCK
  IMPALE
}