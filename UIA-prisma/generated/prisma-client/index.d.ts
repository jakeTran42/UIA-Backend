// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  boss: (where?: BossWhereInput) => Promise<boolean>;
  bossStruct: (where?: BossStructWhereInput) => Promise<boolean>;
  class: (where?: ClassWhereInput) => Promise<boolean>;
  continent: (where?: ContinentWhereInput) => Promise<boolean>;
  element: (where?: ElementWhereInput) => Promise<boolean>;
  food: (where?: FoodWhereInput) => Promise<boolean>;
  guide: (where?: GuideWhereInput) => Promise<boolean>;
  map: (where?: MapWhereInput) => Promise<boolean>;
  monsterSkill: (where?: MonsterSkillWhereInput) => Promise<boolean>;
  pet: (where?: PetWhereInput) => Promise<boolean>;
  skill: (where?: SkillWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  boss: (where: BossWhereUniqueInput) => BossNullablePromise;
  bosses: (args?: {
    where?: BossWhereInput;
    orderBy?: BossOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Boss>;
  bossesConnection: (args?: {
    where?: BossWhereInput;
    orderBy?: BossOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BossConnectionPromise;
  bossStruct: (where: BossStructWhereUniqueInput) => BossStructNullablePromise;
  bossStructs: (args?: {
    where?: BossStructWhereInput;
    orderBy?: BossStructOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<BossStruct>;
  bossStructsConnection: (args?: {
    where?: BossStructWhereInput;
    orderBy?: BossStructOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BossStructConnectionPromise;
  class: (where: ClassWhereUniqueInput) => ClassNullablePromise;
  classes: (args?: {
    where?: ClassWhereInput;
    orderBy?: ClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Class>;
  classesConnection: (args?: {
    where?: ClassWhereInput;
    orderBy?: ClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClassConnectionPromise;
  continent: (where: ContinentWhereUniqueInput) => ContinentNullablePromise;
  continents: (args?: {
    where?: ContinentWhereInput;
    orderBy?: ContinentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Continent>;
  continentsConnection: (args?: {
    where?: ContinentWhereInput;
    orderBy?: ContinentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContinentConnectionPromise;
  element: (where: ElementWhereUniqueInput) => ElementNullablePromise;
  elements: (args?: {
    where?: ElementWhereInput;
    orderBy?: ElementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Element>;
  elementsConnection: (args?: {
    where?: ElementWhereInput;
    orderBy?: ElementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ElementConnectionPromise;
  food: (where: FoodWhereUniqueInput) => FoodNullablePromise;
  foods: (args?: {
    where?: FoodWhereInput;
    orderBy?: FoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Food>;
  foodsConnection: (args?: {
    where?: FoodWhereInput;
    orderBy?: FoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FoodConnectionPromise;
  guide: (where: GuideWhereUniqueInput) => GuideNullablePromise;
  guides: (args?: {
    where?: GuideWhereInput;
    orderBy?: GuideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Guide>;
  guidesConnection: (args?: {
    where?: GuideWhereInput;
    orderBy?: GuideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GuideConnectionPromise;
  map: (where: MapWhereUniqueInput) => MapNullablePromise;
  maps: (args?: {
    where?: MapWhereInput;
    orderBy?: MapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Map>;
  mapsConnection: (args?: {
    where?: MapWhereInput;
    orderBy?: MapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MapConnectionPromise;
  monsterSkill: (
    where: MonsterSkillWhereUniqueInput
  ) => MonsterSkillNullablePromise;
  monsterSkills: (args?: {
    where?: MonsterSkillWhereInput;
    orderBy?: MonsterSkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MonsterSkill>;
  monsterSkillsConnection: (args?: {
    where?: MonsterSkillWhereInput;
    orderBy?: MonsterSkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MonsterSkillConnectionPromise;
  pet: (where: PetWhereUniqueInput) => PetNullablePromise;
  pets: (args?: {
    where?: PetWhereInput;
    orderBy?: PetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Pet>;
  petsConnection: (args?: {
    where?: PetWhereInput;
    orderBy?: PetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PetConnectionPromise;
  skill: (where: SkillWhereUniqueInput) => SkillNullablePromise;
  skills: (args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Skill>;
  skillsConnection: (args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SkillConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBoss: (data: BossCreateInput) => BossPromise;
  updateBoss: (args: {
    data: BossUpdateInput;
    where: BossWhereUniqueInput;
  }) => BossPromise;
  updateManyBosses: (args: {
    data: BossUpdateManyMutationInput;
    where?: BossWhereInput;
  }) => BatchPayloadPromise;
  upsertBoss: (args: {
    where: BossWhereUniqueInput;
    create: BossCreateInput;
    update: BossUpdateInput;
  }) => BossPromise;
  deleteBoss: (where: BossWhereUniqueInput) => BossPromise;
  deleteManyBosses: (where?: BossWhereInput) => BatchPayloadPromise;
  createBossStruct: (data: BossStructCreateInput) => BossStructPromise;
  updateBossStruct: (args: {
    data: BossStructUpdateInput;
    where: BossStructWhereUniqueInput;
  }) => BossStructPromise;
  updateManyBossStructs: (args: {
    data: BossStructUpdateManyMutationInput;
    where?: BossStructWhereInput;
  }) => BatchPayloadPromise;
  upsertBossStruct: (args: {
    where: BossStructWhereUniqueInput;
    create: BossStructCreateInput;
    update: BossStructUpdateInput;
  }) => BossStructPromise;
  deleteBossStruct: (where: BossStructWhereUniqueInput) => BossStructPromise;
  deleteManyBossStructs: (where?: BossStructWhereInput) => BatchPayloadPromise;
  createClass: (data: ClassCreateInput) => ClassPromise;
  updateClass: (args: {
    data: ClassUpdateInput;
    where: ClassWhereUniqueInput;
  }) => ClassPromise;
  updateManyClasses: (args: {
    data: ClassUpdateManyMutationInput;
    where?: ClassWhereInput;
  }) => BatchPayloadPromise;
  upsertClass: (args: {
    where: ClassWhereUniqueInput;
    create: ClassCreateInput;
    update: ClassUpdateInput;
  }) => ClassPromise;
  deleteClass: (where: ClassWhereUniqueInput) => ClassPromise;
  deleteManyClasses: (where?: ClassWhereInput) => BatchPayloadPromise;
  createContinent: (data: ContinentCreateInput) => ContinentPromise;
  updateContinent: (args: {
    data: ContinentUpdateInput;
    where: ContinentWhereUniqueInput;
  }) => ContinentPromise;
  updateManyContinents: (args: {
    data: ContinentUpdateManyMutationInput;
    where?: ContinentWhereInput;
  }) => BatchPayloadPromise;
  upsertContinent: (args: {
    where: ContinentWhereUniqueInput;
    create: ContinentCreateInput;
    update: ContinentUpdateInput;
  }) => ContinentPromise;
  deleteContinent: (where: ContinentWhereUniqueInput) => ContinentPromise;
  deleteManyContinents: (where?: ContinentWhereInput) => BatchPayloadPromise;
  createElement: (data: ElementCreateInput) => ElementPromise;
  updateElement: (args: {
    data: ElementUpdateInput;
    where: ElementWhereUniqueInput;
  }) => ElementPromise;
  updateManyElements: (args: {
    data: ElementUpdateManyMutationInput;
    where?: ElementWhereInput;
  }) => BatchPayloadPromise;
  upsertElement: (args: {
    where: ElementWhereUniqueInput;
    create: ElementCreateInput;
    update: ElementUpdateInput;
  }) => ElementPromise;
  deleteElement: (where: ElementWhereUniqueInput) => ElementPromise;
  deleteManyElements: (where?: ElementWhereInput) => BatchPayloadPromise;
  createFood: (data: FoodCreateInput) => FoodPromise;
  updateFood: (args: {
    data: FoodUpdateInput;
    where: FoodWhereUniqueInput;
  }) => FoodPromise;
  updateManyFoods: (args: {
    data: FoodUpdateManyMutationInput;
    where?: FoodWhereInput;
  }) => BatchPayloadPromise;
  upsertFood: (args: {
    where: FoodWhereUniqueInput;
    create: FoodCreateInput;
    update: FoodUpdateInput;
  }) => FoodPromise;
  deleteFood: (where: FoodWhereUniqueInput) => FoodPromise;
  deleteManyFoods: (where?: FoodWhereInput) => BatchPayloadPromise;
  createGuide: (data: GuideCreateInput) => GuidePromise;
  updateGuide: (args: {
    data: GuideUpdateInput;
    where: GuideWhereUniqueInput;
  }) => GuidePromise;
  updateManyGuides: (args: {
    data: GuideUpdateManyMutationInput;
    where?: GuideWhereInput;
  }) => BatchPayloadPromise;
  upsertGuide: (args: {
    where: GuideWhereUniqueInput;
    create: GuideCreateInput;
    update: GuideUpdateInput;
  }) => GuidePromise;
  deleteGuide: (where: GuideWhereUniqueInput) => GuidePromise;
  deleteManyGuides: (where?: GuideWhereInput) => BatchPayloadPromise;
  createMap: (data: MapCreateInput) => MapPromise;
  updateMap: (args: {
    data: MapUpdateInput;
    where: MapWhereUniqueInput;
  }) => MapPromise;
  updateManyMaps: (args: {
    data: MapUpdateManyMutationInput;
    where?: MapWhereInput;
  }) => BatchPayloadPromise;
  upsertMap: (args: {
    where: MapWhereUniqueInput;
    create: MapCreateInput;
    update: MapUpdateInput;
  }) => MapPromise;
  deleteMap: (where: MapWhereUniqueInput) => MapPromise;
  deleteManyMaps: (where?: MapWhereInput) => BatchPayloadPromise;
  createMonsterSkill: (data: MonsterSkillCreateInput) => MonsterSkillPromise;
  updateMonsterSkill: (args: {
    data: MonsterSkillUpdateInput;
    where: MonsterSkillWhereUniqueInput;
  }) => MonsterSkillPromise;
  updateManyMonsterSkills: (args: {
    data: MonsterSkillUpdateManyMutationInput;
    where?: MonsterSkillWhereInput;
  }) => BatchPayloadPromise;
  upsertMonsterSkill: (args: {
    where: MonsterSkillWhereUniqueInput;
    create: MonsterSkillCreateInput;
    update: MonsterSkillUpdateInput;
  }) => MonsterSkillPromise;
  deleteMonsterSkill: (
    where: MonsterSkillWhereUniqueInput
  ) => MonsterSkillPromise;
  deleteManyMonsterSkills: (
    where?: MonsterSkillWhereInput
  ) => BatchPayloadPromise;
  createPet: (data: PetCreateInput) => PetPromise;
  updatePet: (args: {
    data: PetUpdateInput;
    where: PetWhereUniqueInput;
  }) => PetPromise;
  updateManyPets: (args: {
    data: PetUpdateManyMutationInput;
    where?: PetWhereInput;
  }) => BatchPayloadPromise;
  upsertPet: (args: {
    where: PetWhereUniqueInput;
    create: PetCreateInput;
    update: PetUpdateInput;
  }) => PetPromise;
  deletePet: (where: PetWhereUniqueInput) => PetPromise;
  deleteManyPets: (where?: PetWhereInput) => BatchPayloadPromise;
  createSkill: (data: SkillCreateInput) => SkillPromise;
  updateSkill: (args: {
    data: SkillUpdateInput;
    where: SkillWhereUniqueInput;
  }) => SkillPromise;
  updateManySkills: (args: {
    data: SkillUpdateManyMutationInput;
    where?: SkillWhereInput;
  }) => BatchPayloadPromise;
  upsertSkill: (args: {
    where: SkillWhereUniqueInput;
    create: SkillCreateInput;
    update: SkillUpdateInput;
  }) => SkillPromise;
  deleteSkill: (where: SkillWhereUniqueInput) => SkillPromise;
  deleteManySkills: (where?: SkillWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  boss: (
    where?: BossSubscriptionWhereInput
  ) => BossSubscriptionPayloadSubscription;
  bossStruct: (
    where?: BossStructSubscriptionWhereInput
  ) => BossStructSubscriptionPayloadSubscription;
  class: (
    where?: ClassSubscriptionWhereInput
  ) => ClassSubscriptionPayloadSubscription;
  continent: (
    where?: ContinentSubscriptionWhereInput
  ) => ContinentSubscriptionPayloadSubscription;
  element: (
    where?: ElementSubscriptionWhereInput
  ) => ElementSubscriptionPayloadSubscription;
  food: (
    where?: FoodSubscriptionWhereInput
  ) => FoodSubscriptionPayloadSubscription;
  guide: (
    where?: GuideSubscriptionWhereInput
  ) => GuideSubscriptionPayloadSubscription;
  map: (
    where?: MapSubscriptionWhereInput
  ) => MapSubscriptionPayloadSubscription;
  monsterSkill: (
    where?: MonsterSkillSubscriptionWhereInput
  ) => MonsterSkillSubscriptionPayloadSubscription;
  pet: (
    where?: PetSubscriptionWhereInput
  ) => PetSubscriptionPayloadSubscription;
  skill: (
    where?: SkillSubscriptionWhereInput
  ) => SkillSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "element_one_value_ASC"
  | "element_one_value_DESC"
  | "element_two_value_ASC"
  | "element_two_value_DESC"
  | "talent_cap_ASC"
  | "talent_cap_DESC"
  | "type_ASC"
  | "type_DESC"
  | "imageurl_ASC"
  | "imageurl_DESC";

export type Stat =
  | "ATTACK"
  | "HP"
  | "ARMOR"
  | "ATK_SPD"
  | "HIT"
  | "EVASION"
  | "CRIT"
  | "TENACITY"
  | "BLOCK"
  | "IMPALE";

export type MonsterSkillOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "energy_ASC"
  | "energy_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updateAt_ASC"
  | "updateAt_DESC"
  | "handle_ASC"
  | "handle_DESC"
  | "email_ASC"
  | "email_DESC"
  | "role_ASC"
  | "role_DESC"
  | "password_ASC"
  | "password_DESC";

export type Hero =
  | "WARLOCK"
  | "SHAMAN"
  | "ASSASSIN"
  | "HUNTER"
  | "DRUID"
  | "MAGE"
  | "GLADIATOR"
  | "WARRIOR";

export type ElementType = "FIRE" | "LIGHTNING" | "FROST" | "EARTH";

export type BossStructOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "minion_present_ASC"
  | "minion_present_DESC"
  | "AtkSpd_ASC"
  | "AtkSpd_DESC";

export type FoodOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "buff_ASC"
  | "buff_DESC"
  | "imageurl_ASC"
  | "imageurl_DESC";

export type CombatType =
  | "UNKNOWN"
  | "BUFF"
  | "DAMAGE"
  | "HEAL"
  | "CONTINUOUS"
  | "OVER_TIME"
  | "AREA_OF_EFFECT"
  | "TARGET"
  | "CROWD_CONTROL"
  | "SUMMON"
  | "DEBUFF"
  | "DISPELL"
  | "RANDOM"
  | "ABSORB"
  | "STEALTH"
  | "PASSIVE";

export type ClassOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "weapon_ASC"
  | "weapon_DESC";

export type SkillType = "UNKNOWN" | "ACTIVE" | "PASSIVE";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type MapOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "total_stage_ASC"
  | "total_stage_DESC"
  | "previous_map_ASC"
  | "previous_map_DESC"
  | "next_map_ASC"
  | "next_map_DESC"
  | "imageurl_ASC"
  | "imageurl_DESC";

export type PetType = "ASSIST" | "SYMBIOSIS" | "ATTACK" | "GUARDIAN";

export type BossOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "element_one_value_ASC"
  | "element_one_value_DESC"
  | "element_two_value_ASC"
  | "element_two_value_DESC";

export type SkillOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "energy_ASC"
  | "energy_DESC";

export type GuideOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updateAt_ASC"
  | "updateAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "body_ASC"
  | "body_DESC";

export type ContinentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "next_continent_ASC"
  | "next_continent_DESC"
  | "previous_continent_ASC"
  | "previous_continent_DESC";

export type ElementOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "weakness_ASC"
  | "weakness_DESC"
  | "effective_ASC"
  | "effective_DESC";

export type Role = "ADMIN" | "MODERATOR" | "USER";

export interface MapUpdateWithoutContinentDataInput {
  name?: Maybe<String>;
  total_stage?: Maybe<Int>;
  native_boss?: Maybe<BossUpdateManyWithoutMap_foundInput>;
  obtainable_skills?: Maybe<SkillUpdateManyWithoutLocationInput>;
  bosses_found?: Maybe<BossStructUpdateManyWithoutMapInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  pet_unlock?: Maybe<PetUpdateManyWithoutAreaInput>;
  imageurl?: Maybe<String>;
}

export type BossWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface FoodUpdateOneWithoutPet_favoriteInput {
  create?: Maybe<FoodCreateWithoutPet_favoriteInput>;
  update?: Maybe<FoodUpdateWithoutPet_favoriteDataInput>;
  upsert?: Maybe<FoodUpsertWithoutPet_favoriteInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<FoodWhereUniqueInput>;
}

export interface FoodWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  pet_favorite_every?: Maybe<PetWhereInput>;
  pet_favorite_some?: Maybe<PetWhereInput>;
  pet_favorite_none?: Maybe<PetWhereInput>;
  buff?: Maybe<Stat>;
  buff_not?: Maybe<Stat>;
  buff_in?: Maybe<Stat[] | Stat>;
  buff_not_in?: Maybe<Stat[] | Stat>;
  imageurl?: Maybe<String>;
  imageurl_not?: Maybe<String>;
  imageurl_in?: Maybe<String[] | String>;
  imageurl_not_in?: Maybe<String[] | String>;
  imageurl_lt?: Maybe<String>;
  imageurl_lte?: Maybe<String>;
  imageurl_gt?: Maybe<String>;
  imageurl_gte?: Maybe<String>;
  imageurl_contains?: Maybe<String>;
  imageurl_not_contains?: Maybe<String>;
  imageurl_starts_with?: Maybe<String>;
  imageurl_not_starts_with?: Maybe<String>;
  imageurl_ends_with?: Maybe<String>;
  imageurl_not_ends_with?: Maybe<String>;
  AND?: Maybe<FoodWhereInput[] | FoodWhereInput>;
  OR?: Maybe<FoodWhereInput[] | FoodWhereInput>;
  NOT?: Maybe<FoodWhereInput[] | FoodWhereInput>;
}

export interface FoodUpdateWithoutPet_favoriteDataInput {
  name?: Maybe<String>;
  buff?: Maybe<Stat>;
  imageurl?: Maybe<String>;
}

export interface PetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  element_one?: Maybe<ElementWhereInput>;
  element_one_value?: Maybe<Int>;
  element_one_value_not?: Maybe<Int>;
  element_one_value_in?: Maybe<Int[] | Int>;
  element_one_value_not_in?: Maybe<Int[] | Int>;
  element_one_value_lt?: Maybe<Int>;
  element_one_value_lte?: Maybe<Int>;
  element_one_value_gt?: Maybe<Int>;
  element_one_value_gte?: Maybe<Int>;
  element_two?: Maybe<ElementWhereInput>;
  element_two_value?: Maybe<Int>;
  element_two_value_not?: Maybe<Int>;
  element_two_value_in?: Maybe<Int[] | Int>;
  element_two_value_not_in?: Maybe<Int[] | Int>;
  element_two_value_lt?: Maybe<Int>;
  element_two_value_lte?: Maybe<Int>;
  element_two_value_gt?: Maybe<Int>;
  element_two_value_gte?: Maybe<Int>;
  talent_cap?: Maybe<Float>;
  talent_cap_not?: Maybe<Float>;
  talent_cap_in?: Maybe<Float[] | Float>;
  talent_cap_not_in?: Maybe<Float[] | Float>;
  talent_cap_lt?: Maybe<Float>;
  talent_cap_lte?: Maybe<Float>;
  talent_cap_gt?: Maybe<Float>;
  talent_cap_gte?: Maybe<Float>;
  type?: Maybe<PetType>;
  type_not?: Maybe<PetType>;
  type_in?: Maybe<PetType[] | PetType>;
  type_not_in?: Maybe<PetType[] | PetType>;
  favorite_food?: Maybe<FoodWhereInput>;
  area?: Maybe<MapWhereInput>;
  imageurl?: Maybe<String>;
  imageurl_not?: Maybe<String>;
  imageurl_in?: Maybe<String[] | String>;
  imageurl_not_in?: Maybe<String[] | String>;
  imageurl_lt?: Maybe<String>;
  imageurl_lte?: Maybe<String>;
  imageurl_gt?: Maybe<String>;
  imageurl_gte?: Maybe<String>;
  imageurl_contains?: Maybe<String>;
  imageurl_not_contains?: Maybe<String>;
  imageurl_starts_with?: Maybe<String>;
  imageurl_not_starts_with?: Maybe<String>;
  imageurl_ends_with?: Maybe<String>;
  imageurl_not_ends_with?: Maybe<String>;
  AND?: Maybe<PetWhereInput[] | PetWhereInput>;
  OR?: Maybe<PetWhereInput[] | PetWhereInput>;
  NOT?: Maybe<PetWhereInput[] | PetWhereInput>;
}

export interface ElementUpdateDataInput {
  name?: Maybe<ElementType>;
  weakness?: Maybe<ElementType>;
  effective?: Maybe<ElementType>;
}

export interface PetCreateManyWithoutFavorite_foodInput {
  create?: Maybe<
    PetCreateWithoutFavorite_foodInput[] | PetCreateWithoutFavorite_foodInput
  >;
  connect?: Maybe<PetWhereUniqueInput[] | PetWhereUniqueInput>;
}

export interface ElementUpsertNestedInput {
  update: ElementUpdateDataInput;
  create: ElementCreateInput;
}

export interface FoodUpsertWithoutPet_favoriteInput {
  update: FoodUpdateWithoutPet_favoriteDataInput;
  create: FoodCreateWithoutPet_favoriteInput;
}

export interface MapUpdateManyWithoutNative_bossInput {
  create?: Maybe<
    MapCreateWithoutNative_bossInput[] | MapCreateWithoutNative_bossInput
  >;
  delete?: Maybe<MapWhereUniqueInput[] | MapWhereUniqueInput>;
  connect?: Maybe<MapWhereUniqueInput[] | MapWhereUniqueInput>;
  set?: Maybe<MapWhereUniqueInput[] | MapWhereUniqueInput>;
  disconnect?: Maybe<MapWhereUniqueInput[] | MapWhereUniqueInput>;
  update?: Maybe<
    | MapUpdateWithWhereUniqueWithoutNative_bossInput[]
    | MapUpdateWithWhereUniqueWithoutNative_bossInput
  >;
  upsert?: Maybe<
    | MapUpsertWithWhereUniqueWithoutNative_bossInput[]
    | MapUpsertWithWhereUniqueWithoutNative_bossInput
  >;
  deleteMany?: Maybe<MapScalarWhereInput[] | MapScalarWhereInput>;
  updateMany?: Maybe<
    MapUpdateManyWithWhereNestedInput[] | MapUpdateManyWithWhereNestedInput
  >;
}

export interface SkillSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SkillWhereInput>;
  AND?: Maybe<SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput>;
  OR?: Maybe<SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput>;
  NOT?: Maybe<SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput>;
}

export interface MapUpdateWithWhereUniqueWithoutNative_bossInput {
  where: MapWhereUniqueInput;
  data: MapUpdateWithoutNative_bossDataInput;
}

export interface PetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PetWhereInput>;
  AND?: Maybe<PetSubscriptionWhereInput[] | PetSubscriptionWhereInput>;
  OR?: Maybe<PetSubscriptionWhereInput[] | PetSubscriptionWhereInput>;
  NOT?: Maybe<PetSubscriptionWhereInput[] | PetSubscriptionWhereInput>;
}

export interface MapUpdateWithoutNative_bossDataInput {
  name?: Maybe<String>;
  total_stage?: Maybe<Int>;
  obtainable_skills?: Maybe<SkillUpdateManyWithoutLocationInput>;
  bosses_found?: Maybe<BossStructUpdateManyWithoutMapInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  pet_unlock?: Maybe<PetUpdateManyWithoutAreaInput>;
  continent?: Maybe<ContinentUpdateOneRequiredWithoutMapsInput>;
  imageurl?: Maybe<String>;
}

export interface MonsterSkillSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MonsterSkillWhereInput>;
  AND?: Maybe<
    MonsterSkillSubscriptionWhereInput[] | MonsterSkillSubscriptionWhereInput
  >;
  OR?: Maybe<
    MonsterSkillSubscriptionWhereInput[] | MonsterSkillSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MonsterSkillSubscriptionWhereInput[] | MonsterSkillSubscriptionWhereInput
  >;
}

export interface SkillUpdateManyWithoutLocationInput {
  create?: Maybe<
    SkillCreateWithoutLocationInput[] | SkillCreateWithoutLocationInput
  >;
  delete?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  connect?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  set?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  disconnect?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  update?: Maybe<
    | SkillUpdateWithWhereUniqueWithoutLocationInput[]
    | SkillUpdateWithWhereUniqueWithoutLocationInput
  >;
  upsert?: Maybe<
    | SkillUpsertWithWhereUniqueWithoutLocationInput[]
    | SkillUpsertWithWhereUniqueWithoutLocationInput
  >;
  deleteMany?: Maybe<SkillScalarWhereInput[] | SkillScalarWhereInput>;
  updateMany?: Maybe<
    SkillUpdateManyWithWhereNestedInput[] | SkillUpdateManyWithWhereNestedInput
  >;
}

export interface MapSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MapWhereInput>;
  AND?: Maybe<MapSubscriptionWhereInput[] | MapSubscriptionWhereInput>;
  OR?: Maybe<MapSubscriptionWhereInput[] | MapSubscriptionWhereInput>;
  NOT?: Maybe<MapSubscriptionWhereInput[] | MapSubscriptionWhereInput>;
}

export interface SkillUpdateWithWhereUniqueWithoutLocationInput {
  where: SkillWhereUniqueInput;
  data: SkillUpdateWithoutLocationDataInput;
}

export interface FoodSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FoodWhereInput>;
  AND?: Maybe<FoodSubscriptionWhereInput[] | FoodSubscriptionWhereInput>;
  OR?: Maybe<FoodSubscriptionWhereInput[] | FoodSubscriptionWhereInput>;
  NOT?: Maybe<FoodSubscriptionWhereInput[] | FoodSubscriptionWhereInput>;
}

export interface SkillUpdateWithoutLocationDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  skill_type?: Maybe<SkillUpdateskill_typeInput>;
  combat_type?: Maybe<SkillUpdatecombat_typeInput>;
  energy?: Maybe<Int>;
  class?: Maybe<ClassUpdateOneWithoutSkillsInput>;
}

export interface ElementSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ElementWhereInput>;
  AND?: Maybe<ElementSubscriptionWhereInput[] | ElementSubscriptionWhereInput>;
  OR?: Maybe<ElementSubscriptionWhereInput[] | ElementSubscriptionWhereInput>;
  NOT?: Maybe<ElementSubscriptionWhereInput[] | ElementSubscriptionWhereInput>;
}

export interface SkillUpdateskill_typeInput {
  set?: Maybe<SkillType[] | SkillType>;
}

export interface ClassSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClassWhereInput>;
  AND?: Maybe<ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput>;
  OR?: Maybe<ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput>;
  NOT?: Maybe<ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput>;
}

export interface SkillUpdatecombat_typeInput {
  set?: Maybe<CombatType[] | CombatType>;
}

export type BossStructWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ClassUpdateOneWithoutSkillsInput {
  create?: Maybe<ClassCreateWithoutSkillsInput>;
  update?: Maybe<ClassUpdateWithoutSkillsDataInput>;
  upsert?: Maybe<ClassUpsertWithoutSkillsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ClassWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  updateAt?: Maybe<DateTimeInput>;
  handle?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
}

export interface ClassUpdateWithoutSkillsDataInput {
  name?: Maybe<Hero>;
  description?: Maybe<String>;
  weapon?: Maybe<String>;
}

export type ClassWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<Hero>;
}>;

export interface ClassUpsertWithoutSkillsInput {
  update: ClassUpdateWithoutSkillsDataInput;
  create: ClassCreateWithoutSkillsInput;
}

export interface GuideUpdateManyWithWhereNestedInput {
  where: GuideScalarWhereInput;
  data: GuideUpdateManyDataInput;
}

export interface SkillUpsertWithWhereUniqueWithoutLocationInput {
  where: SkillWhereUniqueInput;
  update: SkillUpdateWithoutLocationDataInput;
  create: SkillCreateWithoutLocationInput;
}

export interface GuideUpsertWithWhereUniqueWithoutOwnerInput {
  where: GuideWhereUniqueInput;
  update: GuideUpdateWithoutOwnerDataInput;
  create: GuideCreateWithoutOwnerInput;
}

export interface SkillScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  energy?: Maybe<Int>;
  energy_not?: Maybe<Int>;
  energy_in?: Maybe<Int[] | Int>;
  energy_not_in?: Maybe<Int[] | Int>;
  energy_lt?: Maybe<Int>;
  energy_lte?: Maybe<Int>;
  energy_gt?: Maybe<Int>;
  energy_gte?: Maybe<Int>;
  AND?: Maybe<SkillScalarWhereInput[] | SkillScalarWhereInput>;
  OR?: Maybe<SkillScalarWhereInput[] | SkillScalarWhereInput>;
  NOT?: Maybe<SkillScalarWhereInput[] | SkillScalarWhereInput>;
}

export interface GuideUpdateWithoutOwnerDataInput {
  updateAt?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface SkillUpdateManyWithWhereNestedInput {
  where: SkillScalarWhereInput;
  data: SkillUpdateManyDataInput;
}

export interface GuideUpdateManyWithoutOwnerInput {
  create?: Maybe<GuideCreateWithoutOwnerInput[] | GuideCreateWithoutOwnerInput>;
  delete?: Maybe<GuideWhereUniqueInput[] | GuideWhereUniqueInput>;
  connect?: Maybe<GuideWhereUniqueInput[] | GuideWhereUniqueInput>;
  set?: Maybe<GuideWhereUniqueInput[] | GuideWhereUniqueInput>;
  disconnect?: Maybe<GuideWhereUniqueInput[] | GuideWhereUniqueInput>;
  update?: Maybe<
    | GuideUpdateWithWhereUniqueWithoutOwnerInput[]
    | GuideUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | GuideUpsertWithWhereUniqueWithoutOwnerInput[]
    | GuideUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<GuideScalarWhereInput[] | GuideScalarWhereInput>;
  updateMany?: Maybe<
    GuideUpdateManyWithWhereNestedInput[] | GuideUpdateManyWithWhereNestedInput
  >;
}

export interface SkillUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  skill_type?: Maybe<SkillUpdateskill_typeInput>;
  combat_type?: Maybe<SkillUpdatecombat_typeInput>;
  energy?: Maybe<Int>;
}

export interface BossWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  element_one?: Maybe<ElementWhereInput>;
  element_one_value?: Maybe<Int>;
  element_one_value_not?: Maybe<Int>;
  element_one_value_in?: Maybe<Int[] | Int>;
  element_one_value_not_in?: Maybe<Int[] | Int>;
  element_one_value_lt?: Maybe<Int>;
  element_one_value_lte?: Maybe<Int>;
  element_one_value_gt?: Maybe<Int>;
  element_one_value_gte?: Maybe<Int>;
  element_two?: Maybe<ElementWhereInput>;
  element_two_value?: Maybe<Int>;
  element_two_value_not?: Maybe<Int>;
  element_two_value_in?: Maybe<Int[] | Int>;
  element_two_value_not_in?: Maybe<Int[] | Int>;
  element_two_value_lt?: Maybe<Int>;
  element_two_value_lte?: Maybe<Int>;
  element_two_value_gt?: Maybe<Int>;
  element_two_value_gte?: Maybe<Int>;
  map_found_every?: Maybe<MapWhereInput>;
  map_found_some?: Maybe<MapWhereInput>;
  map_found_none?: Maybe<MapWhereInput>;
  continent_found_every?: Maybe<ContinentWhereInput>;
  continent_found_some?: Maybe<ContinentWhereInput>;
  continent_found_none?: Maybe<ContinentWhereInput>;
  AND?: Maybe<BossWhereInput[] | BossWhereInput>;
  OR?: Maybe<BossWhereInput[] | BossWhereInput>;
  NOT?: Maybe<BossWhereInput[] | BossWhereInput>;
}

export interface BossStructUpdateManyWithoutMapInput {
  create?: Maybe<
    BossStructCreateWithoutMapInput[] | BossStructCreateWithoutMapInput
  >;
  delete?: Maybe<BossStructWhereUniqueInput[] | BossStructWhereUniqueInput>;
  connect?: Maybe<BossStructWhereUniqueInput[] | BossStructWhereUniqueInput>;
  set?: Maybe<BossStructWhereUniqueInput[] | BossStructWhereUniqueInput>;
  disconnect?: Maybe<BossStructWhereUniqueInput[] | BossStructWhereUniqueInput>;
  update?: Maybe<
    | BossStructUpdateWithWhereUniqueWithoutMapInput[]
    | BossStructUpdateWithWhereUniqueWithoutMapInput
  >;
  upsert?: Maybe<
    | BossStructUpsertWithWhereUniqueWithoutMapInput[]
    | BossStructUpsertWithWhereUniqueWithoutMapInput
  >;
  deleteMany?: Maybe<BossStructScalarWhereInput[] | BossStructScalarWhereInput>;
  updateMany?: Maybe<
    | BossStructUpdateManyWithWhereNestedInput[]
    | BossStructUpdateManyWithWhereNestedInput
  >;
}

export interface GuideCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  updateAt?: Maybe<DateTimeInput>;
  title: String;
  body: String;
}

export interface BossStructUpdateWithWhereUniqueWithoutMapInput {
  where: BossStructWhereUniqueInput;
  data: BossStructUpdateWithoutMapDataInput;
}

export type FoodWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface BossStructUpdateWithoutMapDataInput {
  boss?: Maybe<BossUpdateOneRequiredInput>;
  minion_present?: Maybe<Boolean>;
  AtkSpd?: Maybe<Float>;
  skills?: Maybe<MonsterSkillUpdateManyInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  updateAt?: Maybe<DateTimeInput>;
  handle: String;
  email: String;
  role?: Maybe<Role>;
  password: String;
  guides?: Maybe<GuideCreateManyWithoutOwnerInput>;
}

export interface BossUpdateOneRequiredInput {
  create?: Maybe<BossCreateInput>;
  update?: Maybe<BossUpdateDataInput>;
  upsert?: Maybe<BossUpsertNestedInput>;
  connect?: Maybe<BossWhereUniqueInput>;
}

export interface SkillUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  skill_type?: Maybe<SkillUpdateskill_typeInput>;
  combat_type?: Maybe<SkillUpdatecombat_typeInput>;
  energy?: Maybe<Int>;
  location?: Maybe<MapUpdateOneWithoutObtainable_skillsInput>;
  class?: Maybe<ClassUpdateOneWithoutSkillsInput>;
}

export interface BossUpdateDataInput {
  name?: Maybe<String>;
  element_one?: Maybe<ElementUpdateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementUpdateOneInput>;
  element_two_value?: Maybe<Int>;
  map_found?: Maybe<MapUpdateManyWithoutNative_bossInput>;
  continent_found?: Maybe<ContinentUpdateManyWithoutBossesInput>;
}

export interface SkillCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  skill_type?: Maybe<SkillCreateskill_typeInput>;
  combat_type?: Maybe<SkillCreatecombat_typeInput>;
  energy?: Maybe<Int>;
  location?: Maybe<MapCreateOneWithoutObtainable_skillsInput>;
  class?: Maybe<ClassCreateOneWithoutSkillsInput>;
}

export interface ContinentUpdateManyWithoutBossesInput {
  create?: Maybe<
    ContinentCreateWithoutBossesInput[] | ContinentCreateWithoutBossesInput
  >;
  delete?: Maybe<ContinentWhereUniqueInput[] | ContinentWhereUniqueInput>;
  connect?: Maybe<ContinentWhereUniqueInput[] | ContinentWhereUniqueInput>;
  set?: Maybe<ContinentWhereUniqueInput[] | ContinentWhereUniqueInput>;
  disconnect?: Maybe<ContinentWhereUniqueInput[] | ContinentWhereUniqueInput>;
  update?: Maybe<
    | ContinentUpdateWithWhereUniqueWithoutBossesInput[]
    | ContinentUpdateWithWhereUniqueWithoutBossesInput
  >;
  upsert?: Maybe<
    | ContinentUpsertWithWhereUniqueWithoutBossesInput[]
    | ContinentUpsertWithWhereUniqueWithoutBossesInput
  >;
  deleteMany?: Maybe<ContinentScalarWhereInput[] | ContinentScalarWhereInput>;
  updateMany?: Maybe<
    | ContinentUpdateManyWithWhereNestedInput[]
    | ContinentUpdateManyWithWhereNestedInput
  >;
}

export interface PetUpdateInput {
  name?: Maybe<String>;
  element_one?: Maybe<ElementUpdateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementUpdateOneInput>;
  element_two_value?: Maybe<Int>;
  talent_cap?: Maybe<Float>;
  type?: Maybe<PetType>;
  favorite_food?: Maybe<FoodUpdateOneWithoutPet_favoriteInput>;
  area?: Maybe<MapUpdateOneWithoutPet_unlockInput>;
  imageurl?: Maybe<String>;
}

export interface ContinentUpdateWithWhereUniqueWithoutBossesInput {
  where: ContinentWhereUniqueInput;
  data: ContinentUpdateWithoutBossesDataInput;
}

export interface GuideWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updateAt?: Maybe<DateTimeInput>;
  updateAt_not?: Maybe<DateTimeInput>;
  updateAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_lt?: Maybe<DateTimeInput>;
  updateAt_lte?: Maybe<DateTimeInput>;
  updateAt_gt?: Maybe<DateTimeInput>;
  updateAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  owner?: Maybe<UserWhereInput>;
  AND?: Maybe<GuideWhereInput[] | GuideWhereInput>;
  OR?: Maybe<GuideWhereInput[] | GuideWhereInput>;
  NOT?: Maybe<GuideWhereInput[] | GuideWhereInput>;
}

export interface ContinentUpdateWithoutBossesDataInput {
  name?: Maybe<String>;
  maps?: Maybe<MapUpdateManyWithoutContinentInput>;
  next_continent?: Maybe<String>;
  previous_continent?: Maybe<String>;
}

export interface MonsterSkillUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  skill_type?: Maybe<MonsterSkillUpdateskill_typeInput>;
  combat_type?: Maybe<MonsterSkillUpdatecombat_typeInput>;
  energy?: Maybe<Int>;
}

export interface MapUpdateManyWithoutContinentInput {
  create?: Maybe<
    MapCreateWithoutContinentInput[] | MapCreateWithoutContinentInput
  >;
  delete?: Maybe<MapWhereUniqueInput[] | MapWhereUniqueInput>;
  connect?: Maybe<MapWhereUniqueInput[] | MapWhereUniqueInput>;
  set?: Maybe<MapWhereUniqueInput[] | MapWhereUniqueInput>;
  disconnect?: Maybe<MapWhereUniqueInput[] | MapWhereUniqueInput>;
  update?: Maybe<
    | MapUpdateWithWhereUniqueWithoutContinentInput[]
    | MapUpdateWithWhereUniqueWithoutContinentInput
  >;
  upsert?: Maybe<
    | MapUpsertWithWhereUniqueWithoutContinentInput[]
    | MapUpsertWithWhereUniqueWithoutContinentInput
  >;
  deleteMany?: Maybe<MapScalarWhereInput[] | MapScalarWhereInput>;
  updateMany?: Maybe<
    MapUpdateManyWithWhereNestedInput[] | MapUpdateManyWithWhereNestedInput
  >;
}

export interface MapUpdateManyMutationInput {
  name?: Maybe<String>;
  total_stage?: Maybe<Int>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  imageurl?: Maybe<String>;
}

export interface MapUpdateWithWhereUniqueWithoutContinentInput {
  where: MapWhereUniqueInput;
  data: MapUpdateWithoutContinentDataInput;
}

export type MapWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface PetUpdateManyWithoutFavorite_foodInput {
  create?: Maybe<
    PetCreateWithoutFavorite_foodInput[] | PetCreateWithoutFavorite_foodInput
  >;
  delete?: Maybe<PetWhereUniqueInput[] | PetWhereUniqueInput>;
  connect?: Maybe<PetWhereUniqueInput[] | PetWhereUniqueInput>;
  set?: Maybe<PetWhereUniqueInput[] | PetWhereUniqueInput>;
  disconnect?: Maybe<PetWhereUniqueInput[] | PetWhereUniqueInput>;
  update?: Maybe<
    | PetUpdateWithWhereUniqueWithoutFavorite_foodInput[]
    | PetUpdateWithWhereUniqueWithoutFavorite_foodInput
  >;
  upsert?: Maybe<
    | PetUpsertWithWhereUniqueWithoutFavorite_foodInput[]
    | PetUpsertWithWhereUniqueWithoutFavorite_foodInput
  >;
  deleteMany?: Maybe<PetScalarWhereInput[] | PetScalarWhereInput>;
  updateMany?: Maybe<
    PetUpdateManyWithWhereNestedInput[] | PetUpdateManyWithWhereNestedInput
  >;
}

export interface GuideUpdateManyMutationInput {
  updateAt?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface BossUpdateManyWithoutMap_foundInput {
  create?: Maybe<
    BossCreateWithoutMap_foundInput[] | BossCreateWithoutMap_foundInput
  >;
  delete?: Maybe<BossWhereUniqueInput[] | BossWhereUniqueInput>;
  connect?: Maybe<BossWhereUniqueInput[] | BossWhereUniqueInput>;
  set?: Maybe<BossWhereUniqueInput[] | BossWhereUniqueInput>;
  disconnect?: Maybe<BossWhereUniqueInput[] | BossWhereUniqueInput>;
  update?: Maybe<
    | BossUpdateWithWhereUniqueWithoutMap_foundInput[]
    | BossUpdateWithWhereUniqueWithoutMap_foundInput
  >;
  upsert?: Maybe<
    | BossUpsertWithWhereUniqueWithoutMap_foundInput[]
    | BossUpsertWithWhereUniqueWithoutMap_foundInput
  >;
  deleteMany?: Maybe<BossScalarWhereInput[] | BossScalarWhereInput>;
  updateMany?: Maybe<
    BossUpdateManyWithWhereNestedInput[] | BossUpdateManyWithWhereNestedInput
  >;
}

export type MonsterSkillWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface BossUpdateWithWhereUniqueWithoutMap_foundInput {
  where: BossWhereUniqueInput;
  data: BossUpdateWithoutMap_foundDataInput;
}

export interface UserUpdateOneRequiredWithoutGuidesInput {
  create?: Maybe<UserCreateWithoutGuidesInput>;
  update?: Maybe<UserUpdateWithoutGuidesDataInput>;
  upsert?: Maybe<UserUpsertWithoutGuidesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface BossUpdateWithoutMap_foundDataInput {
  name?: Maybe<String>;
  element_one?: Maybe<ElementUpdateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementUpdateOneInput>;
  element_two_value?: Maybe<Int>;
  continent_found?: Maybe<ContinentUpdateManyWithoutBossesInput>;
}

export type PetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface BossUpsertWithWhereUniqueWithoutMap_foundInput {
  where: BossWhereUniqueInput;
  update: BossUpdateWithoutMap_foundDataInput;
  create: BossCreateWithoutMap_foundInput;
}

export interface UserCreateOneWithoutGuidesInput {
  create?: Maybe<UserCreateWithoutGuidesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface BossScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  element_one_value?: Maybe<Int>;
  element_one_value_not?: Maybe<Int>;
  element_one_value_in?: Maybe<Int[] | Int>;
  element_one_value_not_in?: Maybe<Int[] | Int>;
  element_one_value_lt?: Maybe<Int>;
  element_one_value_lte?: Maybe<Int>;
  element_one_value_gt?: Maybe<Int>;
  element_one_value_gte?: Maybe<Int>;
  element_two_value?: Maybe<Int>;
  element_two_value_not?: Maybe<Int>;
  element_two_value_in?: Maybe<Int[] | Int>;
  element_two_value_not_in?: Maybe<Int[] | Int>;
  element_two_value_lt?: Maybe<Int>;
  element_two_value_lte?: Maybe<Int>;
  element_two_value_gt?: Maybe<Int>;
  element_two_value_gte?: Maybe<Int>;
  AND?: Maybe<BossScalarWhereInput[] | BossScalarWhereInput>;
  OR?: Maybe<BossScalarWhereInput[] | BossScalarWhereInput>;
  NOT?: Maybe<BossScalarWhereInput[] | BossScalarWhereInput>;
}

export type SkillWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface BossUpdateManyWithWhereNestedInput {
  where: BossScalarWhereInput;
  data: BossUpdateManyDataInput;
}

export interface PetUpsertWithWhereUniqueWithoutFavorite_foodInput {
  where: PetWhereUniqueInput;
  update: PetUpdateWithoutFavorite_foodDataInput;
  create: PetCreateWithoutFavorite_foodInput;
}

export interface BossUpdateManyDataInput {
  name?: Maybe<String>;
  element_one_value?: Maybe<Int>;
  element_two_value?: Maybe<Int>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  handle?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface PetUpdateManyWithoutAreaInput {
  create?: Maybe<PetCreateWithoutAreaInput[] | PetCreateWithoutAreaInput>;
  delete?: Maybe<PetWhereUniqueInput[] | PetWhereUniqueInput>;
  connect?: Maybe<PetWhereUniqueInput[] | PetWhereUniqueInput>;
  set?: Maybe<PetWhereUniqueInput[] | PetWhereUniqueInput>;
  disconnect?: Maybe<PetWhereUniqueInput[] | PetWhereUniqueInput>;
  update?: Maybe<
    | PetUpdateWithWhereUniqueWithoutAreaInput[]
    | PetUpdateWithWhereUniqueWithoutAreaInput
  >;
  upsert?: Maybe<
    | PetUpsertWithWhereUniqueWithoutAreaInput[]
    | PetUpsertWithWhereUniqueWithoutAreaInput
  >;
  deleteMany?: Maybe<PetScalarWhereInput[] | PetScalarWhereInput>;
  updateMany?: Maybe<
    PetUpdateManyWithWhereNestedInput[] | PetUpdateManyWithWhereNestedInput
  >;
}

export interface MapUpdateOneWithoutPet_unlockInput {
  create?: Maybe<MapCreateWithoutPet_unlockInput>;
  update?: Maybe<MapUpdateWithoutPet_unlockDataInput>;
  upsert?: Maybe<MapUpsertWithoutPet_unlockInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MapWhereUniqueInput>;
}

export interface PetUpdateWithWhereUniqueWithoutAreaInput {
  where: PetWhereUniqueInput;
  data: PetUpdateWithoutAreaDataInput;
}

export interface PetUpdateWithWhereUniqueWithoutFavorite_foodInput {
  where: PetWhereUniqueInput;
  data: PetUpdateWithoutFavorite_foodDataInput;
}

export interface PetUpdateWithoutAreaDataInput {
  name?: Maybe<String>;
  element_one?: Maybe<ElementUpdateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementUpdateOneInput>;
  element_two_value?: Maybe<Int>;
  talent_cap?: Maybe<Float>;
  type?: Maybe<PetType>;
  favorite_food?: Maybe<FoodUpdateOneWithoutPet_favoriteInput>;
  imageurl?: Maybe<String>;
}

export interface BossCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  element_one?: Maybe<ElementCreateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementCreateOneInput>;
  element_two_value?: Maybe<Int>;
  map_found?: Maybe<MapCreateManyWithoutNative_bossInput>;
  continent_found?: Maybe<ContinentCreateManyWithoutBossesInput>;
}

export interface FoodUpdateInput {
  name?: Maybe<String>;
  pet_favorite?: Maybe<PetUpdateManyWithoutFavorite_foodInput>;
  buff?: Maybe<Stat>;
  imageurl?: Maybe<String>;
}

export interface ElementCreateInput {
  id?: Maybe<ID_Input>;
  name: ElementType;
  weakness?: Maybe<ElementType>;
  effective?: Maybe<ElementType>;
}

export interface MonsterSkillWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  energy?: Maybe<Int>;
  energy_not?: Maybe<Int>;
  energy_in?: Maybe<Int[] | Int>;
  energy_not_in?: Maybe<Int[] | Int>;
  energy_lt?: Maybe<Int>;
  energy_lte?: Maybe<Int>;
  energy_gt?: Maybe<Int>;
  energy_gte?: Maybe<Int>;
  AND?: Maybe<MonsterSkillWhereInput[] | MonsterSkillWhereInput>;
  OR?: Maybe<MonsterSkillWhereInput[] | MonsterSkillWhereInput>;
  NOT?: Maybe<MonsterSkillWhereInput[] | MonsterSkillWhereInput>;
}

export interface MapCreateWithoutNative_bossInput {
  id?: Maybe<ID_Input>;
  name: String;
  total_stage?: Maybe<Int>;
  obtainable_skills?: Maybe<SkillCreateManyWithoutLocationInput>;
  bosses_found?: Maybe<BossStructCreateManyWithoutMapInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  pet_unlock?: Maybe<PetCreateManyWithoutAreaInput>;
  continent: ContinentCreateOneWithoutMapsInput;
  imageurl?: Maybe<String>;
}

export interface MapCreateWithoutPet_unlockInput {
  id?: Maybe<ID_Input>;
  name: String;
  total_stage?: Maybe<Int>;
  native_boss?: Maybe<BossCreateManyWithoutMap_foundInput>;
  obtainable_skills?: Maybe<SkillCreateManyWithoutLocationInput>;
  bosses_found?: Maybe<BossStructCreateManyWithoutMapInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  continent: ContinentCreateOneWithoutMapsInput;
  imageurl?: Maybe<String>;
}

export interface SkillCreateWithoutLocationInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  skill_type?: Maybe<SkillCreateskill_typeInput>;
  combat_type?: Maybe<SkillCreatecombat_typeInput>;
  energy?: Maybe<Int>;
  class?: Maybe<ClassCreateOneWithoutSkillsInput>;
}

export interface PetUpsertWithWhereUniqueWithoutAreaInput {
  where: PetWhereUniqueInput;
  update: PetUpdateWithoutAreaDataInput;
  create: PetCreateWithoutAreaInput;
}

export interface SkillCreatecombat_typeInput {
  set?: Maybe<CombatType[] | CombatType>;
}

export interface PetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  element_one_value?: Maybe<Int>;
  element_one_value_not?: Maybe<Int>;
  element_one_value_in?: Maybe<Int[] | Int>;
  element_one_value_not_in?: Maybe<Int[] | Int>;
  element_one_value_lt?: Maybe<Int>;
  element_one_value_lte?: Maybe<Int>;
  element_one_value_gt?: Maybe<Int>;
  element_one_value_gte?: Maybe<Int>;
  element_two_value?: Maybe<Int>;
  element_two_value_not?: Maybe<Int>;
  element_two_value_in?: Maybe<Int[] | Int>;
  element_two_value_not_in?: Maybe<Int[] | Int>;
  element_two_value_lt?: Maybe<Int>;
  element_two_value_lte?: Maybe<Int>;
  element_two_value_gt?: Maybe<Int>;
  element_two_value_gte?: Maybe<Int>;
  talent_cap?: Maybe<Float>;
  talent_cap_not?: Maybe<Float>;
  talent_cap_in?: Maybe<Float[] | Float>;
  talent_cap_not_in?: Maybe<Float[] | Float>;
  talent_cap_lt?: Maybe<Float>;
  talent_cap_lte?: Maybe<Float>;
  talent_cap_gt?: Maybe<Float>;
  talent_cap_gte?: Maybe<Float>;
  type?: Maybe<PetType>;
  type_not?: Maybe<PetType>;
  type_in?: Maybe<PetType[] | PetType>;
  type_not_in?: Maybe<PetType[] | PetType>;
  imageurl?: Maybe<String>;
  imageurl_not?: Maybe<String>;
  imageurl_in?: Maybe<String[] | String>;
  imageurl_not_in?: Maybe<String[] | String>;
  imageurl_lt?: Maybe<String>;
  imageurl_lte?: Maybe<String>;
  imageurl_gt?: Maybe<String>;
  imageurl_gte?: Maybe<String>;
  imageurl_contains?: Maybe<String>;
  imageurl_not_contains?: Maybe<String>;
  imageurl_starts_with?: Maybe<String>;
  imageurl_not_starts_with?: Maybe<String>;
  imageurl_ends_with?: Maybe<String>;
  imageurl_not_ends_with?: Maybe<String>;
  AND?: Maybe<PetScalarWhereInput[] | PetScalarWhereInput>;
  OR?: Maybe<PetScalarWhereInput[] | PetScalarWhereInput>;
  NOT?: Maybe<PetScalarWhereInput[] | PetScalarWhereInput>;
}

export interface ClassCreateWithoutSkillsInput {
  id?: Maybe<ID_Input>;
  name: Hero;
  description: String;
  weapon: String;
}

export interface PetUpdateManyWithWhereNestedInput {
  where: PetScalarWhereInput;
  data: PetUpdateManyDataInput;
}

export interface BossStructCreateWithoutMapInput {
  id?: Maybe<ID_Input>;
  boss: BossCreateOneInput;
  minion_present?: Maybe<Boolean>;
  AtkSpd?: Maybe<Float>;
  skills?: Maybe<MonsterSkillCreateManyInput>;
}

export interface PetUpdateManyDataInput {
  name?: Maybe<String>;
  element_one_value?: Maybe<Int>;
  element_two_value?: Maybe<Int>;
  talent_cap?: Maybe<Float>;
  type?: Maybe<PetType>;
  imageurl?: Maybe<String>;
}

export interface MonsterSkillCreateManyInput {
  create?: Maybe<MonsterSkillCreateInput[] | MonsterSkillCreateInput>;
  connect?: Maybe<
    MonsterSkillWhereUniqueInput[] | MonsterSkillWhereUniqueInput
  >;
}

export interface MapUpsertWithWhereUniqueWithoutContinentInput {
  where: MapWhereUniqueInput;
  update: MapUpdateWithoutContinentDataInput;
  create: MapCreateWithoutContinentInput;
}

export interface MonsterSkillCreateskill_typeInput {
  set?: Maybe<SkillType[] | SkillType>;
}

export interface MapScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  total_stage?: Maybe<Int>;
  total_stage_not?: Maybe<Int>;
  total_stage_in?: Maybe<Int[] | Int>;
  total_stage_not_in?: Maybe<Int[] | Int>;
  total_stage_lt?: Maybe<Int>;
  total_stage_lte?: Maybe<Int>;
  total_stage_gt?: Maybe<Int>;
  total_stage_gte?: Maybe<Int>;
  previous_map?: Maybe<String>;
  previous_map_not?: Maybe<String>;
  previous_map_in?: Maybe<String[] | String>;
  previous_map_not_in?: Maybe<String[] | String>;
  previous_map_lt?: Maybe<String>;
  previous_map_lte?: Maybe<String>;
  previous_map_gt?: Maybe<String>;
  previous_map_gte?: Maybe<String>;
  previous_map_contains?: Maybe<String>;
  previous_map_not_contains?: Maybe<String>;
  previous_map_starts_with?: Maybe<String>;
  previous_map_not_starts_with?: Maybe<String>;
  previous_map_ends_with?: Maybe<String>;
  previous_map_not_ends_with?: Maybe<String>;
  next_map?: Maybe<String>;
  next_map_not?: Maybe<String>;
  next_map_in?: Maybe<String[] | String>;
  next_map_not_in?: Maybe<String[] | String>;
  next_map_lt?: Maybe<String>;
  next_map_lte?: Maybe<String>;
  next_map_gt?: Maybe<String>;
  next_map_gte?: Maybe<String>;
  next_map_contains?: Maybe<String>;
  next_map_not_contains?: Maybe<String>;
  next_map_starts_with?: Maybe<String>;
  next_map_not_starts_with?: Maybe<String>;
  next_map_ends_with?: Maybe<String>;
  next_map_not_ends_with?: Maybe<String>;
  imageurl?: Maybe<String>;
  imageurl_not?: Maybe<String>;
  imageurl_in?: Maybe<String[] | String>;
  imageurl_not_in?: Maybe<String[] | String>;
  imageurl_lt?: Maybe<String>;
  imageurl_lte?: Maybe<String>;
  imageurl_gt?: Maybe<String>;
  imageurl_gte?: Maybe<String>;
  imageurl_contains?: Maybe<String>;
  imageurl_not_contains?: Maybe<String>;
  imageurl_starts_with?: Maybe<String>;
  imageurl_not_starts_with?: Maybe<String>;
  imageurl_ends_with?: Maybe<String>;
  imageurl_not_ends_with?: Maybe<String>;
  AND?: Maybe<MapScalarWhereInput[] | MapScalarWhereInput>;
  OR?: Maybe<MapScalarWhereInput[] | MapScalarWhereInput>;
  NOT?: Maybe<MapScalarWhereInput[] | MapScalarWhereInput>;
}

export interface PetCreateManyWithoutAreaInput {
  create?: Maybe<PetCreateWithoutAreaInput[] | PetCreateWithoutAreaInput>;
  connect?: Maybe<PetWhereUniqueInput[] | PetWhereUniqueInput>;
}

export interface MapUpdateManyWithWhereNestedInput {
  where: MapScalarWhereInput;
  data: MapUpdateManyDataInput;
}

export interface FoodCreateOneWithoutPet_favoriteInput {
  create?: Maybe<FoodCreateWithoutPet_favoriteInput>;
  connect?: Maybe<FoodWhereUniqueInput>;
}

export interface MapUpdateManyDataInput {
  name?: Maybe<String>;
  total_stage?: Maybe<Int>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  imageurl?: Maybe<String>;
}

export interface ContinentCreateOneWithoutMapsInput {
  create?: Maybe<ContinentCreateWithoutMapsInput>;
  connect?: Maybe<ContinentWhereUniqueInput>;
}

export interface ContinentUpsertWithWhereUniqueWithoutBossesInput {
  where: ContinentWhereUniqueInput;
  update: ContinentUpdateWithoutBossesDataInput;
  create: ContinentCreateWithoutBossesInput;
}

export interface BossCreateManyWithoutContinent_foundInput {
  create?: Maybe<
    | BossCreateWithoutContinent_foundInput[]
    | BossCreateWithoutContinent_foundInput
  >;
  connect?: Maybe<BossWhereUniqueInput[] | BossWhereUniqueInput>;
}

export interface ContinentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  next_continent?: Maybe<String>;
  next_continent_not?: Maybe<String>;
  next_continent_in?: Maybe<String[] | String>;
  next_continent_not_in?: Maybe<String[] | String>;
  next_continent_lt?: Maybe<String>;
  next_continent_lte?: Maybe<String>;
  next_continent_gt?: Maybe<String>;
  next_continent_gte?: Maybe<String>;
  next_continent_contains?: Maybe<String>;
  next_continent_not_contains?: Maybe<String>;
  next_continent_starts_with?: Maybe<String>;
  next_continent_not_starts_with?: Maybe<String>;
  next_continent_ends_with?: Maybe<String>;
  next_continent_not_ends_with?: Maybe<String>;
  previous_continent?: Maybe<String>;
  previous_continent_not?: Maybe<String>;
  previous_continent_in?: Maybe<String[] | String>;
  previous_continent_not_in?: Maybe<String[] | String>;
  previous_continent_lt?: Maybe<String>;
  previous_continent_lte?: Maybe<String>;
  previous_continent_gt?: Maybe<String>;
  previous_continent_gte?: Maybe<String>;
  previous_continent_contains?: Maybe<String>;
  previous_continent_not_contains?: Maybe<String>;
  previous_continent_starts_with?: Maybe<String>;
  previous_continent_not_starts_with?: Maybe<String>;
  previous_continent_ends_with?: Maybe<String>;
  previous_continent_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContinentScalarWhereInput[] | ContinentScalarWhereInput>;
  OR?: Maybe<ContinentScalarWhereInput[] | ContinentScalarWhereInput>;
  NOT?: Maybe<ContinentScalarWhereInput[] | ContinentScalarWhereInput>;
}

export interface ContinentCreateManyWithoutBossesInput {
  create?: Maybe<
    ContinentCreateWithoutBossesInput[] | ContinentCreateWithoutBossesInput
  >;
  connect?: Maybe<ContinentWhereUniqueInput[] | ContinentWhereUniqueInput>;
}

export interface ContinentUpdateManyWithWhereNestedInput {
  where: ContinentScalarWhereInput;
  data: ContinentUpdateManyDataInput;
}

export interface MapCreateManyWithoutContinentInput {
  create?: Maybe<
    MapCreateWithoutContinentInput[] | MapCreateWithoutContinentInput
  >;
  connect?: Maybe<MapWhereUniqueInput[] | MapWhereUniqueInput>;
}

export interface ContinentUpdateManyDataInput {
  name?: Maybe<String>;
  next_continent?: Maybe<String>;
  previous_continent?: Maybe<String>;
}

export interface BossCreateManyWithoutMap_foundInput {
  create?: Maybe<
    BossCreateWithoutMap_foundInput[] | BossCreateWithoutMap_foundInput
  >;
  connect?: Maybe<BossWhereUniqueInput[] | BossWhereUniqueInput>;
}

export interface BossUpsertNestedInput {
  update: BossUpdateDataInput;
  create: BossCreateInput;
}

export interface BossUpdateInput {
  name?: Maybe<String>;
  element_one?: Maybe<ElementUpdateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementUpdateOneInput>;
  element_two_value?: Maybe<Int>;
  map_found?: Maybe<MapUpdateManyWithoutNative_bossInput>;
  continent_found?: Maybe<ContinentUpdateManyWithoutBossesInput>;
}

export interface MonsterSkillUpdateManyInput {
  create?: Maybe<MonsterSkillCreateInput[] | MonsterSkillCreateInput>;
  update?: Maybe<
    | MonsterSkillUpdateWithWhereUniqueNestedInput[]
    | MonsterSkillUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MonsterSkillUpsertWithWhereUniqueNestedInput[]
    | MonsterSkillUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MonsterSkillWhereUniqueInput[] | MonsterSkillWhereUniqueInput>;
  connect?: Maybe<
    MonsterSkillWhereUniqueInput[] | MonsterSkillWhereUniqueInput
  >;
  set?: Maybe<MonsterSkillWhereUniqueInput[] | MonsterSkillWhereUniqueInput>;
  disconnect?: Maybe<
    MonsterSkillWhereUniqueInput[] | MonsterSkillWhereUniqueInput
  >;
  deleteMany?: Maybe<
    MonsterSkillScalarWhereInput[] | MonsterSkillScalarWhereInput
  >;
  updateMany?: Maybe<
    | MonsterSkillUpdateManyWithWhereNestedInput[]
    | MonsterSkillUpdateManyWithWhereNestedInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface MonsterSkillUpdateWithWhereUniqueNestedInput {
  where: MonsterSkillWhereUniqueInput;
  data: MonsterSkillUpdateDataInput;
}

export interface ClassWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<Hero>;
  name_not?: Maybe<Hero>;
  name_in?: Maybe<Hero[] | Hero>;
  name_not_in?: Maybe<Hero[] | Hero>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  weapon?: Maybe<String>;
  weapon_not?: Maybe<String>;
  weapon_in?: Maybe<String[] | String>;
  weapon_not_in?: Maybe<String[] | String>;
  weapon_lt?: Maybe<String>;
  weapon_lte?: Maybe<String>;
  weapon_gt?: Maybe<String>;
  weapon_gte?: Maybe<String>;
  weapon_contains?: Maybe<String>;
  weapon_not_contains?: Maybe<String>;
  weapon_starts_with?: Maybe<String>;
  weapon_not_starts_with?: Maybe<String>;
  weapon_ends_with?: Maybe<String>;
  weapon_not_ends_with?: Maybe<String>;
  skills_every?: Maybe<SkillWhereInput>;
  skills_some?: Maybe<SkillWhereInput>;
  skills_none?: Maybe<SkillWhereInput>;
  AND?: Maybe<ClassWhereInput[] | ClassWhereInput>;
  OR?: Maybe<ClassWhereInput[] | ClassWhereInput>;
  NOT?: Maybe<ClassWhereInput[] | ClassWhereInput>;
}

export interface MonsterSkillUpdateDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  skill_type?: Maybe<MonsterSkillUpdateskill_typeInput>;
  combat_type?: Maybe<MonsterSkillUpdatecombat_typeInput>;
  energy?: Maybe<Int>;
}

export interface GuideSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GuideWhereInput>;
  AND?: Maybe<GuideSubscriptionWhereInput[] | GuideSubscriptionWhereInput>;
  OR?: Maybe<GuideSubscriptionWhereInput[] | GuideSubscriptionWhereInput>;
  NOT?: Maybe<GuideSubscriptionWhereInput[] | GuideSubscriptionWhereInput>;
}

export interface MonsterSkillUpdateskill_typeInput {
  set?: Maybe<SkillType[] | SkillType>;
}

export interface ContinentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContinentWhereInput>;
  AND?: Maybe<
    ContinentSubscriptionWhereInput[] | ContinentSubscriptionWhereInput
  >;
  OR?: Maybe<
    ContinentSubscriptionWhereInput[] | ContinentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ContinentSubscriptionWhereInput[] | ContinentSubscriptionWhereInput
  >;
}

export interface MonsterSkillUpdatecombat_typeInput {
  set?: Maybe<CombatType[] | CombatType>;
}

export interface BossSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BossWhereInput>;
  AND?: Maybe<BossSubscriptionWhereInput[] | BossSubscriptionWhereInput>;
  OR?: Maybe<BossSubscriptionWhereInput[] | BossSubscriptionWhereInput>;
  NOT?: Maybe<BossSubscriptionWhereInput[] | BossSubscriptionWhereInput>;
}

export interface MonsterSkillUpsertWithWhereUniqueNestedInput {
  where: MonsterSkillWhereUniqueInput;
  update: MonsterSkillUpdateDataInput;
  create: MonsterSkillCreateInput;
}

export interface ElementWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<ElementType>;
  name_not?: Maybe<ElementType>;
  name_in?: Maybe<ElementType[] | ElementType>;
  name_not_in?: Maybe<ElementType[] | ElementType>;
  weakness?: Maybe<ElementType>;
  weakness_not?: Maybe<ElementType>;
  weakness_in?: Maybe<ElementType[] | ElementType>;
  weakness_not_in?: Maybe<ElementType[] | ElementType>;
  effective?: Maybe<ElementType>;
  effective_not?: Maybe<ElementType>;
  effective_in?: Maybe<ElementType[] | ElementType>;
  effective_not_in?: Maybe<ElementType[] | ElementType>;
  AND?: Maybe<ElementWhereInput[] | ElementWhereInput>;
  OR?: Maybe<ElementWhereInput[] | ElementWhereInput>;
  NOT?: Maybe<ElementWhereInput[] | ElementWhereInput>;
}

export interface MonsterSkillScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  energy?: Maybe<Int>;
  energy_not?: Maybe<Int>;
  energy_in?: Maybe<Int[] | Int>;
  energy_not_in?: Maybe<Int[] | Int>;
  energy_lt?: Maybe<Int>;
  energy_lte?: Maybe<Int>;
  energy_gt?: Maybe<Int>;
  energy_gte?: Maybe<Int>;
  AND?: Maybe<MonsterSkillScalarWhereInput[] | MonsterSkillScalarWhereInput>;
  OR?: Maybe<MonsterSkillScalarWhereInput[] | MonsterSkillScalarWhereInput>;
  NOT?: Maybe<MonsterSkillScalarWhereInput[] | MonsterSkillScalarWhereInput>;
}

export type ContinentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface MonsterSkillUpdateManyWithWhereNestedInput {
  where: MonsterSkillScalarWhereInput;
  data: MonsterSkillUpdateManyDataInput;
}

export type ElementWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<ElementType>;
}>;

export interface MonsterSkillUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  skill_type?: Maybe<MonsterSkillUpdateskill_typeInput>;
  combat_type?: Maybe<MonsterSkillUpdatecombat_typeInput>;
  energy?: Maybe<Int>;
}

export interface GuideCreateManyWithoutOwnerInput {
  create?: Maybe<GuideCreateWithoutOwnerInput[] | GuideCreateWithoutOwnerInput>;
  connect?: Maybe<GuideWhereUniqueInput[] | GuideWhereUniqueInput>;
}

export interface BossStructUpsertWithWhereUniqueWithoutMapInput {
  where: BossStructWhereUniqueInput;
  update: BossStructUpdateWithoutMapDataInput;
  create: BossStructCreateWithoutMapInput;
}

export interface SkillUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  skill_type?: Maybe<SkillUpdateskill_typeInput>;
  combat_type?: Maybe<SkillUpdatecombat_typeInput>;
  energy?: Maybe<Int>;
}

export interface BossStructScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  minion_present?: Maybe<Boolean>;
  minion_present_not?: Maybe<Boolean>;
  AtkSpd?: Maybe<Float>;
  AtkSpd_not?: Maybe<Float>;
  AtkSpd_in?: Maybe<Float[] | Float>;
  AtkSpd_not_in?: Maybe<Float[] | Float>;
  AtkSpd_lt?: Maybe<Float>;
  AtkSpd_lte?: Maybe<Float>;
  AtkSpd_gt?: Maybe<Float>;
  AtkSpd_gte?: Maybe<Float>;
  AND?: Maybe<BossStructScalarWhereInput[] | BossStructScalarWhereInput>;
  OR?: Maybe<BossStructScalarWhereInput[] | BossStructScalarWhereInput>;
  NOT?: Maybe<BossStructScalarWhereInput[] | BossStructScalarWhereInput>;
}

export interface PetUpdateManyMutationInput {
  name?: Maybe<String>;
  element_one_value?: Maybe<Int>;
  element_two_value?: Maybe<Int>;
  talent_cap?: Maybe<Float>;
  type?: Maybe<PetType>;
  imageurl?: Maybe<String>;
}

export interface BossStructUpdateManyWithWhereNestedInput {
  where: BossStructScalarWhereInput;
  data: BossStructUpdateManyDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updateAt?: Maybe<DateTimeInput>;
  updateAt_not?: Maybe<DateTimeInput>;
  updateAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_lt?: Maybe<DateTimeInput>;
  updateAt_lte?: Maybe<DateTimeInput>;
  updateAt_gt?: Maybe<DateTimeInput>;
  updateAt_gte?: Maybe<DateTimeInput>;
  handle?: Maybe<String>;
  handle_not?: Maybe<String>;
  handle_in?: Maybe<String[] | String>;
  handle_not_in?: Maybe<String[] | String>;
  handle_lt?: Maybe<String>;
  handle_lte?: Maybe<String>;
  handle_gt?: Maybe<String>;
  handle_gte?: Maybe<String>;
  handle_contains?: Maybe<String>;
  handle_not_contains?: Maybe<String>;
  handle_starts_with?: Maybe<String>;
  handle_not_starts_with?: Maybe<String>;
  handle_ends_with?: Maybe<String>;
  handle_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  guides_every?: Maybe<GuideWhereInput>;
  guides_some?: Maybe<GuideWhereInput>;
  guides_none?: Maybe<GuideWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface BossStructUpdateManyDataInput {
  minion_present?: Maybe<Boolean>;
  AtkSpd?: Maybe<Float>;
}

export interface MapUpdateInput {
  name?: Maybe<String>;
  total_stage?: Maybe<Int>;
  native_boss?: Maybe<BossUpdateManyWithoutMap_foundInput>;
  obtainable_skills?: Maybe<SkillUpdateManyWithoutLocationInput>;
  bosses_found?: Maybe<BossStructUpdateManyWithoutMapInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  pet_unlock?: Maybe<PetUpdateManyWithoutAreaInput>;
  continent?: Maybe<ContinentUpdateOneRequiredWithoutMapsInput>;
  imageurl?: Maybe<String>;
}

export interface ContinentUpdateOneRequiredWithoutMapsInput {
  create?: Maybe<ContinentCreateWithoutMapsInput>;
  update?: Maybe<ContinentUpdateWithoutMapsDataInput>;
  upsert?: Maybe<ContinentUpsertWithoutMapsInput>;
  connect?: Maybe<ContinentWhereUniqueInput>;
}

export interface UserUpsertWithoutGuidesInput {
  update: UserUpdateWithoutGuidesDataInput;
  create: UserCreateWithoutGuidesInput;
}

export interface ContinentUpdateWithoutMapsDataInput {
  name?: Maybe<String>;
  bosses?: Maybe<BossUpdateManyWithoutContinent_foundInput>;
  next_continent?: Maybe<String>;
  previous_continent?: Maybe<String>;
}

export interface GuideUpdateInput {
  updateAt?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  body?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredWithoutGuidesInput>;
}

export interface BossUpdateManyWithoutContinent_foundInput {
  create?: Maybe<
    | BossCreateWithoutContinent_foundInput[]
    | BossCreateWithoutContinent_foundInput
  >;
  delete?: Maybe<BossWhereUniqueInput[] | BossWhereUniqueInput>;
  connect?: Maybe<BossWhereUniqueInput[] | BossWhereUniqueInput>;
  set?: Maybe<BossWhereUniqueInput[] | BossWhereUniqueInput>;
  disconnect?: Maybe<BossWhereUniqueInput[] | BossWhereUniqueInput>;
  update?: Maybe<
    | BossUpdateWithWhereUniqueWithoutContinent_foundInput[]
    | BossUpdateWithWhereUniqueWithoutContinent_foundInput
  >;
  upsert?: Maybe<
    | BossUpsertWithWhereUniqueWithoutContinent_foundInput[]
    | BossUpsertWithWhereUniqueWithoutContinent_foundInput
  >;
  deleteMany?: Maybe<BossScalarWhereInput[] | BossScalarWhereInput>;
  updateMany?: Maybe<
    BossUpdateManyWithWhereNestedInput[] | BossUpdateManyWithWhereNestedInput
  >;
}

export interface GuideCreateInput {
  id?: Maybe<ID_Input>;
  updateAt?: Maybe<DateTimeInput>;
  title: String;
  body: String;
  owner: UserCreateOneWithoutGuidesInput;
}

export interface BossUpdateWithWhereUniqueWithoutContinent_foundInput {
  where: BossWhereUniqueInput;
  data: BossUpdateWithoutContinent_foundDataInput;
}

export interface MapUpsertWithoutPet_unlockInput {
  update: MapUpdateWithoutPet_unlockDataInput;
  create: MapCreateWithoutPet_unlockInput;
}

export interface BossUpdateWithoutContinent_foundDataInput {
  name?: Maybe<String>;
  element_one?: Maybe<ElementUpdateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementUpdateOneInput>;
  element_two_value?: Maybe<Int>;
  map_found?: Maybe<MapUpdateManyWithoutNative_bossInput>;
}

export interface PetUpdateWithoutFavorite_foodDataInput {
  name?: Maybe<String>;
  element_one?: Maybe<ElementUpdateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementUpdateOneInput>;
  element_two_value?: Maybe<Int>;
  talent_cap?: Maybe<Float>;
  type?: Maybe<PetType>;
  area?: Maybe<MapUpdateOneWithoutPet_unlockInput>;
  imageurl?: Maybe<String>;
}

export interface BossUpsertWithWhereUniqueWithoutContinent_foundInput {
  where: BossWhereUniqueInput;
  update: BossUpdateWithoutContinent_foundDataInput;
  create: BossCreateWithoutContinent_foundInput;
}

export interface ElementCreateOneInput {
  create?: Maybe<ElementCreateInput>;
  connect?: Maybe<ElementWhereUniqueInput>;
}

export interface ContinentUpsertWithoutMapsInput {
  update: ContinentUpdateWithoutMapsDataInput;
  create: ContinentCreateWithoutMapsInput;
}

export interface SkillCreateManyWithoutLocationInput {
  create?: Maybe<
    SkillCreateWithoutLocationInput[] | SkillCreateWithoutLocationInput
  >;
  connect?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
}

export interface MapUpsertWithWhereUniqueWithoutNative_bossInput {
  where: MapWhereUniqueInput;
  update: MapUpdateWithoutNative_bossDataInput;
  create: MapCreateWithoutNative_bossInput;
}

export interface ClassCreateOneWithoutSkillsInput {
  create?: Maybe<ClassCreateWithoutSkillsInput>;
  connect?: Maybe<ClassWhereUniqueInput>;
}

export interface BossUpdateManyMutationInput {
  name?: Maybe<String>;
  element_one_value?: Maybe<Int>;
  element_two_value?: Maybe<Int>;
}

export interface BossCreateOneInput {
  create?: Maybe<BossCreateInput>;
  connect?: Maybe<BossWhereUniqueInput>;
}

export interface MapCreateOneWithoutPet_unlockInput {
  create?: Maybe<MapCreateWithoutPet_unlockInput>;
  connect?: Maybe<MapWhereUniqueInput>;
}

export interface MonsterSkillCreatecombat_typeInput {
  set?: Maybe<CombatType[] | CombatType>;
}

export interface PetCreateWithoutFavorite_foodInput {
  id?: Maybe<ID_Input>;
  name: String;
  element_one?: Maybe<ElementCreateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementCreateOneInput>;
  element_two_value?: Maybe<Int>;
  talent_cap?: Maybe<Float>;
  type?: Maybe<PetType>;
  area?: Maybe<MapCreateOneWithoutPet_unlockInput>;
  imageurl?: Maybe<String>;
}

export interface FoodCreateWithoutPet_favoriteInput {
  id?: Maybe<ID_Input>;
  name: String;
  buff?: Maybe<Stat>;
  imageurl?: Maybe<String>;
}

export interface BossStructCreateInput {
  id?: Maybe<ID_Input>;
  map: MapCreateOneWithoutBosses_foundInput;
  boss: BossCreateOneInput;
  minion_present?: Maybe<Boolean>;
  AtkSpd?: Maybe<Float>;
  skills?: Maybe<MonsterSkillCreateManyInput>;
}

export interface BossCreateWithoutContinent_foundInput {
  id?: Maybe<ID_Input>;
  name: String;
  element_one?: Maybe<ElementCreateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementCreateOneInput>;
  element_two_value?: Maybe<Int>;
  map_found?: Maybe<MapCreateManyWithoutNative_bossInput>;
}

export interface MapCreateOneWithoutBosses_foundInput {
  create?: Maybe<MapCreateWithoutBosses_foundInput>;
  connect?: Maybe<MapWhereUniqueInput>;
}

export interface MapCreateWithoutContinentInput {
  id?: Maybe<ID_Input>;
  name: String;
  total_stage?: Maybe<Int>;
  native_boss?: Maybe<BossCreateManyWithoutMap_foundInput>;
  obtainable_skills?: Maybe<SkillCreateManyWithoutLocationInput>;
  bosses_found?: Maybe<BossStructCreateManyWithoutMapInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  pet_unlock?: Maybe<PetCreateManyWithoutAreaInput>;
  imageurl?: Maybe<String>;
}

export interface MapCreateWithoutBosses_foundInput {
  id?: Maybe<ID_Input>;
  name: String;
  total_stage?: Maybe<Int>;
  native_boss?: Maybe<BossCreateManyWithoutMap_foundInput>;
  obtainable_skills?: Maybe<SkillCreateManyWithoutLocationInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  pet_unlock?: Maybe<PetCreateManyWithoutAreaInput>;
  continent: ContinentCreateOneWithoutMapsInput;
  imageurl?: Maybe<String>;
}

export interface ElementUpdateOneInput {
  create?: Maybe<ElementCreateInput>;
  update?: Maybe<ElementUpdateDataInput>;
  upsert?: Maybe<ElementUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ElementWhereUniqueInput>;
}

export interface BossStructUpdateInput {
  map?: Maybe<MapUpdateOneRequiredWithoutBosses_foundInput>;
  boss?: Maybe<BossUpdateOneRequiredInput>;
  minion_present?: Maybe<Boolean>;
  AtkSpd?: Maybe<Float>;
  skills?: Maybe<MonsterSkillUpdateManyInput>;
}

export interface SkillWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  energy?: Maybe<Int>;
  energy_not?: Maybe<Int>;
  energy_in?: Maybe<Int[] | Int>;
  energy_not_in?: Maybe<Int[] | Int>;
  energy_lt?: Maybe<Int>;
  energy_lte?: Maybe<Int>;
  energy_gt?: Maybe<Int>;
  energy_gte?: Maybe<Int>;
  location?: Maybe<MapWhereInput>;
  class?: Maybe<ClassWhereInput>;
  AND?: Maybe<SkillWhereInput[] | SkillWhereInput>;
  OR?: Maybe<SkillWhereInput[] | SkillWhereInput>;
  NOT?: Maybe<SkillWhereInput[] | SkillWhereInput>;
}

export interface MapUpdateOneRequiredWithoutBosses_foundInput {
  create?: Maybe<MapCreateWithoutBosses_foundInput>;
  update?: Maybe<MapUpdateWithoutBosses_foundDataInput>;
  upsert?: Maybe<MapUpsertWithoutBosses_foundInput>;
  connect?: Maybe<MapWhereUniqueInput>;
}

export interface BossStructSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BossStructWhereInput>;
  AND?: Maybe<
    BossStructSubscriptionWhereInput[] | BossStructSubscriptionWhereInput
  >;
  OR?: Maybe<
    BossStructSubscriptionWhereInput[] | BossStructSubscriptionWhereInput
  >;
  NOT?: Maybe<
    BossStructSubscriptionWhereInput[] | BossStructSubscriptionWhereInput
  >;
}

export interface MapUpdateWithoutBosses_foundDataInput {
  name?: Maybe<String>;
  total_stage?: Maybe<Int>;
  native_boss?: Maybe<BossUpdateManyWithoutMap_foundInput>;
  obtainable_skills?: Maybe<SkillUpdateManyWithoutLocationInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  pet_unlock?: Maybe<PetUpdateManyWithoutAreaInput>;
  continent?: Maybe<ContinentUpdateOneRequiredWithoutMapsInput>;
  imageurl?: Maybe<String>;
}

export interface GuideScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updateAt?: Maybe<DateTimeInput>;
  updateAt_not?: Maybe<DateTimeInput>;
  updateAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_lt?: Maybe<DateTimeInput>;
  updateAt_lte?: Maybe<DateTimeInput>;
  updateAt_gt?: Maybe<DateTimeInput>;
  updateAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  AND?: Maybe<GuideScalarWhereInput[] | GuideScalarWhereInput>;
  OR?: Maybe<GuideScalarWhereInput[] | GuideScalarWhereInput>;
  NOT?: Maybe<GuideScalarWhereInput[] | GuideScalarWhereInput>;
}

export interface MapUpsertWithoutBosses_foundInput {
  update: MapUpdateWithoutBosses_foundDataInput;
  create: MapCreateWithoutBosses_foundInput;
}

export interface UserUpdateInput {
  updateAt?: Maybe<DateTimeInput>;
  handle?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
  guides?: Maybe<GuideUpdateManyWithoutOwnerInput>;
}

export interface BossStructUpdateManyMutationInput {
  minion_present?: Maybe<Boolean>;
  AtkSpd?: Maybe<Float>;
}

export type GuideWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ClassCreateInput {
  id?: Maybe<ID_Input>;
  name: Hero;
  description: String;
  weapon: String;
  skills?: Maybe<SkillCreateManyWithoutClassInput>;
}

export interface MonsterSkillUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  skill_type?: Maybe<MonsterSkillUpdateskill_typeInput>;
  combat_type?: Maybe<MonsterSkillUpdatecombat_typeInput>;
  energy?: Maybe<Int>;
}

export interface SkillCreateManyWithoutClassInput {
  create?: Maybe<SkillCreateWithoutClassInput[] | SkillCreateWithoutClassInput>;
  connect?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
}

export interface UserUpdateWithoutGuidesDataInput {
  updateAt?: Maybe<DateTimeInput>;
  handle?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  password?: Maybe<String>;
}

export interface SkillCreateWithoutClassInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  skill_type?: Maybe<SkillCreateskill_typeInput>;
  combat_type?: Maybe<SkillCreatecombat_typeInput>;
  energy?: Maybe<Int>;
  location?: Maybe<MapCreateOneWithoutObtainable_skillsInput>;
}

export interface FoodUpdateManyMutationInput {
  name?: Maybe<String>;
  buff?: Maybe<Stat>;
  imageurl?: Maybe<String>;
}

export interface MapCreateOneWithoutObtainable_skillsInput {
  create?: Maybe<MapCreateWithoutObtainable_skillsInput>;
  connect?: Maybe<MapWhereUniqueInput>;
}

export interface SkillCreateskill_typeInput {
  set?: Maybe<SkillType[] | SkillType>;
}

export interface MapCreateWithoutObtainable_skillsInput {
  id?: Maybe<ID_Input>;
  name: String;
  total_stage?: Maybe<Int>;
  native_boss?: Maybe<BossCreateManyWithoutMap_foundInput>;
  bosses_found?: Maybe<BossStructCreateManyWithoutMapInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  pet_unlock?: Maybe<PetCreateManyWithoutAreaInput>;
  continent: ContinentCreateOneWithoutMapsInput;
  imageurl?: Maybe<String>;
}

export interface MonsterSkillCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  skill_type?: Maybe<MonsterSkillCreateskill_typeInput>;
  combat_type?: Maybe<MonsterSkillCreatecombat_typeInput>;
  energy?: Maybe<Int>;
}

export interface ClassUpdateInput {
  name?: Maybe<Hero>;
  description?: Maybe<String>;
  weapon?: Maybe<String>;
  skills?: Maybe<SkillUpdateManyWithoutClassInput>;
}

export interface ContinentCreateWithoutMapsInput {
  id?: Maybe<ID_Input>;
  name: String;
  bosses?: Maybe<BossCreateManyWithoutContinent_foundInput>;
  next_continent?: Maybe<String>;
  previous_continent?: Maybe<String>;
}

export interface SkillUpdateManyWithoutClassInput {
  create?: Maybe<SkillCreateWithoutClassInput[] | SkillCreateWithoutClassInput>;
  delete?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  connect?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  set?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  disconnect?: Maybe<SkillWhereUniqueInput[] | SkillWhereUniqueInput>;
  update?: Maybe<
    | SkillUpdateWithWhereUniqueWithoutClassInput[]
    | SkillUpdateWithWhereUniqueWithoutClassInput
  >;
  upsert?: Maybe<
    | SkillUpsertWithWhereUniqueWithoutClassInput[]
    | SkillUpsertWithWhereUniqueWithoutClassInput
  >;
  deleteMany?: Maybe<SkillScalarWhereInput[] | SkillScalarWhereInput>;
  updateMany?: Maybe<
    SkillUpdateManyWithWhereNestedInput[] | SkillUpdateManyWithWhereNestedInput
  >;
}

export interface BossCreateWithoutMap_foundInput {
  id?: Maybe<ID_Input>;
  name: String;
  element_one?: Maybe<ElementCreateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementCreateOneInput>;
  element_two_value?: Maybe<Int>;
  continent_found?: Maybe<ContinentCreateManyWithoutBossesInput>;
}

export interface SkillUpdateWithWhereUniqueWithoutClassInput {
  where: SkillWhereUniqueInput;
  data: SkillUpdateWithoutClassDataInput;
}

export interface ContinentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  bosses_every?: Maybe<BossWhereInput>;
  bosses_some?: Maybe<BossWhereInput>;
  bosses_none?: Maybe<BossWhereInput>;
  maps_every?: Maybe<MapWhereInput>;
  maps_some?: Maybe<MapWhereInput>;
  maps_none?: Maybe<MapWhereInput>;
  next_continent?: Maybe<String>;
  next_continent_not?: Maybe<String>;
  next_continent_in?: Maybe<String[] | String>;
  next_continent_not_in?: Maybe<String[] | String>;
  next_continent_lt?: Maybe<String>;
  next_continent_lte?: Maybe<String>;
  next_continent_gt?: Maybe<String>;
  next_continent_gte?: Maybe<String>;
  next_continent_contains?: Maybe<String>;
  next_continent_not_contains?: Maybe<String>;
  next_continent_starts_with?: Maybe<String>;
  next_continent_not_starts_with?: Maybe<String>;
  next_continent_ends_with?: Maybe<String>;
  next_continent_not_ends_with?: Maybe<String>;
  previous_continent?: Maybe<String>;
  previous_continent_not?: Maybe<String>;
  previous_continent_in?: Maybe<String[] | String>;
  previous_continent_not_in?: Maybe<String[] | String>;
  previous_continent_lt?: Maybe<String>;
  previous_continent_lte?: Maybe<String>;
  previous_continent_gt?: Maybe<String>;
  previous_continent_gte?: Maybe<String>;
  previous_continent_contains?: Maybe<String>;
  previous_continent_not_contains?: Maybe<String>;
  previous_continent_starts_with?: Maybe<String>;
  previous_continent_not_starts_with?: Maybe<String>;
  previous_continent_ends_with?: Maybe<String>;
  previous_continent_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContinentWhereInput[] | ContinentWhereInput>;
  OR?: Maybe<ContinentWhereInput[] | ContinentWhereInput>;
  NOT?: Maybe<ContinentWhereInput[] | ContinentWhereInput>;
}

export interface SkillUpdateWithoutClassDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  skill_type?: Maybe<SkillUpdateskill_typeInput>;
  combat_type?: Maybe<SkillUpdatecombat_typeInput>;
  energy?: Maybe<Int>;
  location?: Maybe<MapUpdateOneWithoutObtainable_skillsInput>;
}

export interface GuideUpdateWithWhereUniqueWithoutOwnerInput {
  where: GuideWhereUniqueInput;
  data: GuideUpdateWithoutOwnerDataInput;
}

export interface MapUpdateOneWithoutObtainable_skillsInput {
  create?: Maybe<MapCreateWithoutObtainable_skillsInput>;
  update?: Maybe<MapUpdateWithoutObtainable_skillsDataInput>;
  upsert?: Maybe<MapUpsertWithoutObtainable_skillsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MapWhereUniqueInput>;
}

export interface PetCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  element_one?: Maybe<ElementCreateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementCreateOneInput>;
  element_two_value?: Maybe<Int>;
  talent_cap?: Maybe<Float>;
  type?: Maybe<PetType>;
  favorite_food?: Maybe<FoodCreateOneWithoutPet_favoriteInput>;
  area?: Maybe<MapCreateOneWithoutPet_unlockInput>;
  imageurl?: Maybe<String>;
}

export interface MapUpdateWithoutObtainable_skillsDataInput {
  name?: Maybe<String>;
  total_stage?: Maybe<Int>;
  native_boss?: Maybe<BossUpdateManyWithoutMap_foundInput>;
  bosses_found?: Maybe<BossStructUpdateManyWithoutMapInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  pet_unlock?: Maybe<PetUpdateManyWithoutAreaInput>;
  continent?: Maybe<ContinentUpdateOneRequiredWithoutMapsInput>;
  imageurl?: Maybe<String>;
}

export interface UserCreateWithoutGuidesInput {
  id?: Maybe<ID_Input>;
  updateAt?: Maybe<DateTimeInput>;
  handle: String;
  email: String;
  role?: Maybe<Role>;
  password: String;
}

export interface MapUpsertWithoutObtainable_skillsInput {
  update: MapUpdateWithoutObtainable_skillsDataInput;
  create: MapCreateWithoutObtainable_skillsInput;
}

export interface MapCreateManyWithoutNative_bossInput {
  create?: Maybe<
    MapCreateWithoutNative_bossInput[] | MapCreateWithoutNative_bossInput
  >;
  connect?: Maybe<MapWhereUniqueInput[] | MapWhereUniqueInput>;
}

export interface SkillUpsertWithWhereUniqueWithoutClassInput {
  where: SkillWhereUniqueInput;
  update: SkillUpdateWithoutClassDataInput;
  create: SkillCreateWithoutClassInput;
}

export interface PetCreateWithoutAreaInput {
  id?: Maybe<ID_Input>;
  name: String;
  element_one?: Maybe<ElementCreateOneInput>;
  element_one_value?: Maybe<Int>;
  element_two?: Maybe<ElementCreateOneInput>;
  element_two_value?: Maybe<Int>;
  talent_cap?: Maybe<Float>;
  type?: Maybe<PetType>;
  favorite_food?: Maybe<FoodCreateOneWithoutPet_favoriteInput>;
  imageurl?: Maybe<String>;
}

export interface ClassUpdateManyMutationInput {
  name?: Maybe<Hero>;
  description?: Maybe<String>;
  weapon?: Maybe<String>;
}

export interface BossStructWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  map?: Maybe<MapWhereInput>;
  boss?: Maybe<BossWhereInput>;
  minion_present?: Maybe<Boolean>;
  minion_present_not?: Maybe<Boolean>;
  AtkSpd?: Maybe<Float>;
  AtkSpd_not?: Maybe<Float>;
  AtkSpd_in?: Maybe<Float[] | Float>;
  AtkSpd_not_in?: Maybe<Float[] | Float>;
  AtkSpd_lt?: Maybe<Float>;
  AtkSpd_lte?: Maybe<Float>;
  AtkSpd_gt?: Maybe<Float>;
  AtkSpd_gte?: Maybe<Float>;
  skills_every?: Maybe<MonsterSkillWhereInput>;
  skills_some?: Maybe<MonsterSkillWhereInput>;
  skills_none?: Maybe<MonsterSkillWhereInput>;
  AND?: Maybe<BossStructWhereInput[] | BossStructWhereInput>;
  OR?: Maybe<BossStructWhereInput[] | BossStructWhereInput>;
  NOT?: Maybe<BossStructWhereInput[] | BossStructWhereInput>;
}

export interface ContinentCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  bosses?: Maybe<BossCreateManyWithoutContinent_foundInput>;
  maps?: Maybe<MapCreateManyWithoutContinentInput>;
  next_continent?: Maybe<String>;
  previous_continent?: Maybe<String>;
}

export interface MapWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  total_stage?: Maybe<Int>;
  total_stage_not?: Maybe<Int>;
  total_stage_in?: Maybe<Int[] | Int>;
  total_stage_not_in?: Maybe<Int[] | Int>;
  total_stage_lt?: Maybe<Int>;
  total_stage_lte?: Maybe<Int>;
  total_stage_gt?: Maybe<Int>;
  total_stage_gte?: Maybe<Int>;
  native_boss_every?: Maybe<BossWhereInput>;
  native_boss_some?: Maybe<BossWhereInput>;
  native_boss_none?: Maybe<BossWhereInput>;
  obtainable_skills_every?: Maybe<SkillWhereInput>;
  obtainable_skills_some?: Maybe<SkillWhereInput>;
  obtainable_skills_none?: Maybe<SkillWhereInput>;
  bosses_found_every?: Maybe<BossStructWhereInput>;
  bosses_found_some?: Maybe<BossStructWhereInput>;
  bosses_found_none?: Maybe<BossStructWhereInput>;
  previous_map?: Maybe<String>;
  previous_map_not?: Maybe<String>;
  previous_map_in?: Maybe<String[] | String>;
  previous_map_not_in?: Maybe<String[] | String>;
  previous_map_lt?: Maybe<String>;
  previous_map_lte?: Maybe<String>;
  previous_map_gt?: Maybe<String>;
  previous_map_gte?: Maybe<String>;
  previous_map_contains?: Maybe<String>;
  previous_map_not_contains?: Maybe<String>;
  previous_map_starts_with?: Maybe<String>;
  previous_map_not_starts_with?: Maybe<String>;
  previous_map_ends_with?: Maybe<String>;
  previous_map_not_ends_with?: Maybe<String>;
  next_map?: Maybe<String>;
  next_map_not?: Maybe<String>;
  next_map_in?: Maybe<String[] | String>;
  next_map_not_in?: Maybe<String[] | String>;
  next_map_lt?: Maybe<String>;
  next_map_lte?: Maybe<String>;
  next_map_gt?: Maybe<String>;
  next_map_gte?: Maybe<String>;
  next_map_contains?: Maybe<String>;
  next_map_not_contains?: Maybe<String>;
  next_map_starts_with?: Maybe<String>;
  next_map_not_starts_with?: Maybe<String>;
  next_map_ends_with?: Maybe<String>;
  next_map_not_ends_with?: Maybe<String>;
  pet_unlock_every?: Maybe<PetWhereInput>;
  pet_unlock_some?: Maybe<PetWhereInput>;
  pet_unlock_none?: Maybe<PetWhereInput>;
  continent?: Maybe<ContinentWhereInput>;
  imageurl?: Maybe<String>;
  imageurl_not?: Maybe<String>;
  imageurl_in?: Maybe<String[] | String>;
  imageurl_not_in?: Maybe<String[] | String>;
  imageurl_lt?: Maybe<String>;
  imageurl_lte?: Maybe<String>;
  imageurl_gt?: Maybe<String>;
  imageurl_gte?: Maybe<String>;
  imageurl_contains?: Maybe<String>;
  imageurl_not_contains?: Maybe<String>;
  imageurl_starts_with?: Maybe<String>;
  imageurl_not_starts_with?: Maybe<String>;
  imageurl_ends_with?: Maybe<String>;
  imageurl_not_ends_with?: Maybe<String>;
  AND?: Maybe<MapWhereInput[] | MapWhereInput>;
  OR?: Maybe<MapWhereInput[] | MapWhereInput>;
  NOT?: Maybe<MapWhereInput[] | MapWhereInput>;
}

export interface ContinentUpdateInput {
  name?: Maybe<String>;
  bosses?: Maybe<BossUpdateManyWithoutContinent_foundInput>;
  maps?: Maybe<MapUpdateManyWithoutContinentInput>;
  next_continent?: Maybe<String>;
  previous_continent?: Maybe<String>;
}

export interface MapUpdateWithoutPet_unlockDataInput {
  name?: Maybe<String>;
  total_stage?: Maybe<Int>;
  native_boss?: Maybe<BossUpdateManyWithoutMap_foundInput>;
  obtainable_skills?: Maybe<SkillUpdateManyWithoutLocationInput>;
  bosses_found?: Maybe<BossStructUpdateManyWithoutMapInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  continent?: Maybe<ContinentUpdateOneRequiredWithoutMapsInput>;
  imageurl?: Maybe<String>;
}

export interface FoodCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  pet_favorite?: Maybe<PetCreateManyWithoutFavorite_foodInput>;
  buff?: Maybe<Stat>;
  imageurl?: Maybe<String>;
}

export interface ElementUpdateManyMutationInput {
  name?: Maybe<ElementType>;
  weakness?: Maybe<ElementType>;
  effective?: Maybe<ElementType>;
}

export interface ElementUpdateInput {
  name?: Maybe<ElementType>;
  weakness?: Maybe<ElementType>;
  effective?: Maybe<ElementType>;
}

export interface ContinentUpdateManyMutationInput {
  name?: Maybe<String>;
  next_continent?: Maybe<String>;
  previous_continent?: Maybe<String>;
}

export interface BossStructCreateManyWithoutMapInput {
  create?: Maybe<
    BossStructCreateWithoutMapInput[] | BossStructCreateWithoutMapInput
  >;
  connect?: Maybe<BossStructWhereUniqueInput[] | BossStructWhereUniqueInput>;
}

export interface MapCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  total_stage?: Maybe<Int>;
  native_boss?: Maybe<BossCreateManyWithoutMap_foundInput>;
  obtainable_skills?: Maybe<SkillCreateManyWithoutLocationInput>;
  bosses_found?: Maybe<BossStructCreateManyWithoutMapInput>;
  previous_map?: Maybe<String>;
  next_map?: Maybe<String>;
  pet_unlock?: Maybe<PetCreateManyWithoutAreaInput>;
  continent: ContinentCreateOneWithoutMapsInput;
  imageurl?: Maybe<String>;
}

export interface GuideUpdateManyDataInput {
  updateAt?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface ContinentCreateWithoutBossesInput {
  id?: Maybe<ID_Input>;
  name: String;
  maps?: Maybe<MapCreateManyWithoutContinentInput>;
  next_continent?: Maybe<String>;
  previous_continent?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updateAt?: DateTimeOutput;
  handle: String;
  email: String;
  role: Role;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
  handle: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  handle: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface ClassConnection {
  pageInfo: PageInfo;
  edges: ClassEdge[];
}

export interface ClassConnectionPromise
  extends Promise<ClassConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassEdge>>() => T;
  aggregate: <T = AggregateClassPromise>() => T;
}

export interface ClassConnectionSubscription
  extends Promise<AsyncIterator<ClassConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassSubscription>() => T;
}

export interface Skill {
  id: ID_Output;
  name: String;
  description: String;
  skill_type: SkillType[];
  combat_type: CombatType[];
  energy: Int;
}

export interface SkillPromise extends Promise<Skill>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  skill_type: () => Promise<SkillType[]>;
  combat_type: () => Promise<CombatType[]>;
  energy: () => Promise<Int>;
  location: <T = MapPromise>() => T;
  class: <T = ClassPromise>() => T;
}

export interface SkillSubscription
  extends Promise<AsyncIterator<Skill>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  skill_type: () => Promise<AsyncIterator<SkillType[]>>;
  combat_type: () => Promise<AsyncIterator<CombatType[]>>;
  energy: () => Promise<AsyncIterator<Int>>;
  location: <T = MapSubscription>() => T;
  class: <T = ClassSubscription>() => T;
}

export interface SkillNullablePromise
  extends Promise<Skill | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  skill_type: () => Promise<SkillType[]>;
  combat_type: () => Promise<CombatType[]>;
  energy: () => Promise<Int>;
  location: <T = MapPromise>() => T;
  class: <T = ClassPromise>() => T;
}

export interface AggregateClass {
  count: Int;
}

export interface AggregateClassPromise
  extends Promise<AggregateClass>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassSubscription
  extends Promise<AsyncIterator<AggregateClass>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PetPreviousValues {
  id: ID_Output;
  name: String;
  element_one_value?: Int;
  element_two_value?: Int;
  talent_cap?: Float;
  type?: PetType;
  imageurl?: String;
}

export interface PetPreviousValuesPromise
  extends Promise<PetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  element_one_value: () => Promise<Int>;
  element_two_value: () => Promise<Int>;
  talent_cap: () => Promise<Float>;
  type: () => Promise<PetType>;
  imageurl: () => Promise<String>;
}

export interface PetPreviousValuesSubscription
  extends Promise<AsyncIterator<PetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  element_one_value: () => Promise<AsyncIterator<Int>>;
  element_two_value: () => Promise<AsyncIterator<Int>>;
  talent_cap: () => Promise<AsyncIterator<Float>>;
  type: () => Promise<AsyncIterator<PetType>>;
  imageurl: () => Promise<AsyncIterator<String>>;
}

export interface ClassEdge {
  node: Class;
  cursor: String;
}

export interface ClassEdgePromise extends Promise<ClassEdge>, Fragmentable {
  node: <T = ClassPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassEdgeSubscription
  extends Promise<AsyncIterator<ClassEdge>>,
    Fragmentable {
  node: <T = ClassSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBossStruct {
  count: Int;
}

export interface AggregateBossStructPromise
  extends Promise<AggregateBossStruct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBossStructSubscription
  extends Promise<AsyncIterator<AggregateBossStruct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Map {
  id: ID_Output;
  name: String;
  total_stage?: Int;
  previous_map?: String;
  next_map?: String;
  imageurl?: String;
}

export interface MapPromise extends Promise<Map>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  total_stage: () => Promise<Int>;
  native_boss: <T = FragmentableArray<Boss>>(args?: {
    where?: BossWhereInput;
    orderBy?: BossOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  obtainable_skills: <T = FragmentableArray<Skill>>(args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  bosses_found: <T = FragmentableArray<BossStruct>>(args?: {
    where?: BossStructWhereInput;
    orderBy?: BossStructOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  previous_map: () => Promise<String>;
  next_map: () => Promise<String>;
  pet_unlock: <T = FragmentableArray<Pet>>(args?: {
    where?: PetWhereInput;
    orderBy?: PetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  continent: <T = ContinentPromise>() => T;
  imageurl: () => Promise<String>;
}

export interface MapSubscription
  extends Promise<AsyncIterator<Map>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  total_stage: () => Promise<AsyncIterator<Int>>;
  native_boss: <T = Promise<AsyncIterator<BossSubscription>>>(args?: {
    where?: BossWhereInput;
    orderBy?: BossOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  obtainable_skills: <T = Promise<AsyncIterator<SkillSubscription>>>(args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  bosses_found: <T = Promise<AsyncIterator<BossStructSubscription>>>(args?: {
    where?: BossStructWhereInput;
    orderBy?: BossStructOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  previous_map: () => Promise<AsyncIterator<String>>;
  next_map: () => Promise<AsyncIterator<String>>;
  pet_unlock: <T = Promise<AsyncIterator<PetSubscription>>>(args?: {
    where?: PetWhereInput;
    orderBy?: PetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  continent: <T = ContinentSubscription>() => T;
  imageurl: () => Promise<AsyncIterator<String>>;
}

export interface MapNullablePromise extends Promise<Map | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  total_stage: () => Promise<Int>;
  native_boss: <T = FragmentableArray<Boss>>(args?: {
    where?: BossWhereInput;
    orderBy?: BossOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  obtainable_skills: <T = FragmentableArray<Skill>>(args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  bosses_found: <T = FragmentableArray<BossStruct>>(args?: {
    where?: BossStructWhereInput;
    orderBy?: BossStructOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  previous_map: () => Promise<String>;
  next_map: () => Promise<String>;
  pet_unlock: <T = FragmentableArray<Pet>>(args?: {
    where?: PetWhereInput;
    orderBy?: PetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  continent: <T = ContinentPromise>() => T;
  imageurl: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface BossStructEdge {
  node: BossStruct;
  cursor: String;
}

export interface BossStructEdgePromise
  extends Promise<BossStructEdge>,
    Fragmentable {
  node: <T = BossStructPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BossStructEdgeSubscription
  extends Promise<AsyncIterator<BossStructEdge>>,
    Fragmentable {
  node: <T = BossStructSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSkill {
  count: Int;
}

export interface AggregateSkillPromise
  extends Promise<AggregateSkill>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSkillSubscription
  extends Promise<AsyncIterator<AggregateSkill>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BossStructConnection {
  pageInfo: PageInfo;
  edges: BossStructEdge[];
}

export interface BossStructConnectionPromise
  extends Promise<BossStructConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BossStructEdge>>() => T;
  aggregate: <T = AggregateBossStructPromise>() => T;
}

export interface BossStructConnectionSubscription
  extends Promise<AsyncIterator<BossStructConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BossStructEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBossStructSubscription>() => T;
}

export interface SkillConnection {
  pageInfo: PageInfo;
  edges: SkillEdge[];
}

export interface SkillConnectionPromise
  extends Promise<SkillConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SkillEdge>>() => T;
  aggregate: <T = AggregateSkillPromise>() => T;
}

export interface SkillConnectionSubscription
  extends Promise<AsyncIterator<SkillConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SkillEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSkillSubscription>() => T;
}

export interface Class {
  id: ID_Output;
  name: Hero;
  description: String;
  weapon: String;
}

export interface ClassPromise extends Promise<Class>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<Hero>;
  description: () => Promise<String>;
  weapon: () => Promise<String>;
  skills: <T = FragmentableArray<Skill>>(args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClassSubscription
  extends Promise<AsyncIterator<Class>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<Hero>>;
  description: () => Promise<AsyncIterator<String>>;
  weapon: () => Promise<AsyncIterator<String>>;
  skills: <T = Promise<AsyncIterator<SkillSubscription>>>(args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClassNullablePromise
  extends Promise<Class | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<Hero>;
  description: () => Promise<String>;
  weapon: () => Promise<String>;
  skills: <T = FragmentableArray<Skill>>(args?: {
    where?: SkillWhereInput;
    orderBy?: SkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PetEdge {
  node: Pet;
  cursor: String;
}

export interface PetEdgePromise extends Promise<PetEdge>, Fragmentable {
  node: <T = PetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PetEdgeSubscription
  extends Promise<AsyncIterator<PetEdge>>,
    Fragmentable {
  node: <T = PetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BossSubscriptionPayload {
  mutation: MutationType;
  node: Boss;
  updatedFields: String[];
  previousValues: BossPreviousValues;
}

export interface BossSubscriptionPayloadPromise
  extends Promise<BossSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BossPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BossPreviousValuesPromise>() => T;
}

export interface BossSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BossSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BossSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BossPreviousValuesSubscription>() => T;
}

export interface AggregateMonsterSkill {
  count: Int;
}

export interface AggregateMonsterSkillPromise
  extends Promise<AggregateMonsterSkill>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMonsterSkillSubscription
  extends Promise<AsyncIterator<AggregateMonsterSkill>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BossPreviousValues {
  id: ID_Output;
  name: String;
  element_one_value?: Int;
  element_two_value?: Int;
}

export interface BossPreviousValuesPromise
  extends Promise<BossPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  element_one_value: () => Promise<Int>;
  element_two_value: () => Promise<Int>;
}

export interface BossPreviousValuesSubscription
  extends Promise<AsyncIterator<BossPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  element_one_value: () => Promise<AsyncIterator<Int>>;
  element_two_value: () => Promise<AsyncIterator<Int>>;
}

export interface MonsterSkillConnection {
  pageInfo: PageInfo;
  edges: MonsterSkillEdge[];
}

export interface MonsterSkillConnectionPromise
  extends Promise<MonsterSkillConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MonsterSkillEdge>>() => T;
  aggregate: <T = AggregateMonsterSkillPromise>() => T;
}

export interface MonsterSkillConnectionSubscription
  extends Promise<AsyncIterator<MonsterSkillConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MonsterSkillEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMonsterSkillSubscription>() => T;
}

export interface AggregateBoss {
  count: Int;
}

export interface AggregateBossPromise
  extends Promise<AggregateBoss>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBossSubscription
  extends Promise<AsyncIterator<AggregateBoss>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MapEdge {
  node: Map;
  cursor: String;
}

export interface MapEdgePromise extends Promise<MapEdge>, Fragmentable {
  node: <T = MapPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MapEdgeSubscription
  extends Promise<AsyncIterator<MapEdge>>,
    Fragmentable {
  node: <T = MapSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BossStructSubscriptionPayload {
  mutation: MutationType;
  node: BossStruct;
  updatedFields: String[];
  previousValues: BossStructPreviousValues;
}

export interface BossStructSubscriptionPayloadPromise
  extends Promise<BossStructSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BossStructPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BossStructPreviousValuesPromise>() => T;
}

export interface BossStructSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BossStructSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BossStructSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BossStructPreviousValuesSubscription>() => T;
}

export interface AggregateGuide {
  count: Int;
}

export interface AggregateGuidePromise
  extends Promise<AggregateGuide>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuideSubscription
  extends Promise<AsyncIterator<AggregateGuide>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BossStructPreviousValues {
  id: ID_Output;
  minion_present?: Boolean;
  AtkSpd?: Float;
}

export interface BossStructPreviousValuesPromise
  extends Promise<BossStructPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  minion_present: () => Promise<Boolean>;
  AtkSpd: () => Promise<Float>;
}

export interface BossStructPreviousValuesSubscription
  extends Promise<AsyncIterator<BossStructPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  minion_present: () => Promise<AsyncIterator<Boolean>>;
  AtkSpd: () => Promise<AsyncIterator<Float>>;
}

export interface GuideConnection {
  pageInfo: PageInfo;
  edges: GuideEdge[];
}

export interface GuideConnectionPromise
  extends Promise<GuideConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GuideEdge>>() => T;
  aggregate: <T = AggregateGuidePromise>() => T;
}

export interface GuideConnectionSubscription
  extends Promise<AsyncIterator<GuideConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GuideEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuideSubscription>() => T;
}

export interface BossEdge {
  node: Boss;
  cursor: String;
}

export interface BossEdgePromise extends Promise<BossEdge>, Fragmentable {
  node: <T = BossPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BossEdgeSubscription
  extends Promise<AsyncIterator<BossEdge>>,
    Fragmentable {
  node: <T = BossSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SkillPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  skill_type: SkillType[];
  combat_type: CombatType[];
  energy: Int;
}

export interface SkillPreviousValuesPromise
  extends Promise<SkillPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  skill_type: () => Promise<SkillType[]>;
  combat_type: () => Promise<CombatType[]>;
  energy: () => Promise<Int>;
}

export interface SkillPreviousValuesSubscription
  extends Promise<AsyncIterator<SkillPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  skill_type: () => Promise<AsyncIterator<SkillType[]>>;
  combat_type: () => Promise<AsyncIterator<CombatType[]>>;
  energy: () => Promise<AsyncIterator<Int>>;
}

export interface ClassSubscriptionPayload {
  mutation: MutationType;
  node: Class;
  updatedFields: String[];
  previousValues: ClassPreviousValues;
}

export interface ClassSubscriptionPayloadPromise
  extends Promise<ClassSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassPreviousValuesPromise>() => T;
}

export interface ClassSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassPreviousValuesSubscription>() => T;
}

export interface SkillSubscriptionPayload {
  mutation: MutationType;
  node: Skill;
  updatedFields: String[];
  previousValues: SkillPreviousValues;
}

export interface SkillSubscriptionPayloadPromise
  extends Promise<SkillSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SkillPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SkillPreviousValuesPromise>() => T;
}

export interface SkillSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SkillSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SkillSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SkillPreviousValuesSubscription>() => T;
}

export interface ClassPreviousValues {
  id: ID_Output;
  name: Hero;
  description: String;
  weapon: String;
}

export interface ClassPreviousValuesPromise
  extends Promise<ClassPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<Hero>;
  description: () => Promise<String>;
  weapon: () => Promise<String>;
}

export interface ClassPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<Hero>>;
  description: () => Promise<AsyncIterator<String>>;
  weapon: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFood {
  count: Int;
}

export interface AggregateFoodPromise
  extends Promise<AggregateFood>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFoodSubscription
  extends Promise<AsyncIterator<AggregateFood>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface FoodConnection {
  pageInfo: PageInfo;
  edges: FoodEdge[];
}

export interface FoodConnectionPromise
  extends Promise<FoodConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FoodEdge>>() => T;
  aggregate: <T = AggregateFoodPromise>() => T;
}

export interface FoodConnectionSubscription
  extends Promise<AsyncIterator<FoodConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FoodEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFoodSubscription>() => T;
}

export interface ContinentSubscriptionPayload {
  mutation: MutationType;
  node: Continent;
  updatedFields: String[];
  previousValues: ContinentPreviousValues;
}

export interface ContinentSubscriptionPayloadPromise
  extends Promise<ContinentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContinentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContinentPreviousValuesPromise>() => T;
}

export interface ContinentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContinentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContinentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContinentPreviousValuesSubscription>() => T;
}

export interface ElementEdge {
  node: Element;
  cursor: String;
}

export interface ElementEdgePromise extends Promise<ElementEdge>, Fragmentable {
  node: <T = ElementPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ElementEdgeSubscription
  extends Promise<AsyncIterator<ElementEdge>>,
    Fragmentable {
  node: <T = ElementSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ContinentPreviousValues {
  id: ID_Output;
  name: String;
  next_continent?: String;
  previous_continent?: String;
}

export interface ContinentPreviousValuesPromise
  extends Promise<ContinentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  next_continent: () => Promise<String>;
  previous_continent: () => Promise<String>;
}

export interface ContinentPreviousValuesSubscription
  extends Promise<AsyncIterator<ContinentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  next_continent: () => Promise<AsyncIterator<String>>;
  previous_continent: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContinent {
  count: Int;
}

export interface AggregateContinentPromise
  extends Promise<AggregateContinent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContinentSubscription
  extends Promise<AsyncIterator<AggregateContinent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BossConnection {
  pageInfo: PageInfo;
  edges: BossEdge[];
}

export interface BossConnectionPromise
  extends Promise<BossConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BossEdge>>() => T;
  aggregate: <T = AggregateBossPromise>() => T;
}

export interface BossConnectionSubscription
  extends Promise<AsyncIterator<BossConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BossEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBossSubscription>() => T;
}

export interface ContinentConnection {
  pageInfo: PageInfo;
  edges: ContinentEdge[];
}

export interface ContinentConnectionPromise
  extends Promise<ContinentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContinentEdge>>() => T;
  aggregate: <T = AggregateContinentPromise>() => T;
}

export interface ContinentConnectionSubscription
  extends Promise<AsyncIterator<ContinentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContinentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContinentSubscription>() => T;
}

export interface ElementSubscriptionPayload {
  mutation: MutationType;
  node: Element;
  updatedFields: String[];
  previousValues: ElementPreviousValues;
}

export interface ElementSubscriptionPayloadPromise
  extends Promise<ElementSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ElementPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ElementPreviousValuesPromise>() => T;
}

export interface ElementSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ElementSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ElementSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ElementPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ElementPreviousValues {
  id: ID_Output;
  name: ElementType;
  weakness?: ElementType;
  effective?: ElementType;
}

export interface ElementPreviousValuesPromise
  extends Promise<ElementPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ElementType>;
  weakness: () => Promise<ElementType>;
  effective: () => Promise<ElementType>;
}

export interface ElementPreviousValuesSubscription
  extends Promise<AsyncIterator<ElementPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<ElementType>>;
  weakness: () => Promise<AsyncIterator<ElementType>>;
  effective: () => Promise<AsyncIterator<ElementType>>;
}

export interface SkillEdge {
  node: Skill;
  cursor: String;
}

export interface SkillEdgePromise extends Promise<SkillEdge>, Fragmentable {
  node: <T = SkillPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SkillEdgeSubscription
  extends Promise<AsyncIterator<SkillEdge>>,
    Fragmentable {
  node: <T = SkillSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Continent {
  id: ID_Output;
  name: String;
  next_continent?: String;
  previous_continent?: String;
}

export interface ContinentPromise extends Promise<Continent>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bosses: <T = FragmentableArray<Boss>>(args?: {
    where?: BossWhereInput;
    orderBy?: BossOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  maps: <T = FragmentableArray<Map>>(args?: {
    where?: MapWhereInput;
    orderBy?: MapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  next_continent: () => Promise<String>;
  previous_continent: () => Promise<String>;
}

export interface ContinentSubscription
  extends Promise<AsyncIterator<Continent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  bosses: <T = Promise<AsyncIterator<BossSubscription>>>(args?: {
    where?: BossWhereInput;
    orderBy?: BossOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  maps: <T = Promise<AsyncIterator<MapSubscription>>>(args?: {
    where?: MapWhereInput;
    orderBy?: MapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  next_continent: () => Promise<AsyncIterator<String>>;
  previous_continent: () => Promise<AsyncIterator<String>>;
}

export interface ContinentNullablePromise
  extends Promise<Continent | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bosses: <T = FragmentableArray<Boss>>(args?: {
    where?: BossWhereInput;
    orderBy?: BossOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  maps: <T = FragmentableArray<Map>>(args?: {
    where?: MapWhereInput;
    orderBy?: MapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  next_continent: () => Promise<String>;
  previous_continent: () => Promise<String>;
}

export interface PetConnection {
  pageInfo: PageInfo;
  edges: PetEdge[];
}

export interface PetConnectionPromise
  extends Promise<PetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PetEdge>>() => T;
  aggregate: <T = AggregatePetPromise>() => T;
}

export interface PetConnectionSubscription
  extends Promise<AsyncIterator<PetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PetEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePetSubscription>() => T;
}

export interface FoodSubscriptionPayload {
  mutation: MutationType;
  node: Food;
  updatedFields: String[];
  previousValues: FoodPreviousValues;
}

export interface FoodSubscriptionPayloadPromise
  extends Promise<FoodSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FoodPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FoodPreviousValuesPromise>() => T;
}

export interface FoodSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FoodSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FoodSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FoodPreviousValuesSubscription>() => T;
}

export interface AggregateMap {
  count: Int;
}

export interface AggregateMapPromise
  extends Promise<AggregateMap>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMapSubscription
  extends Promise<AsyncIterator<AggregateMap>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FoodPreviousValues {
  id: ID_Output;
  name: String;
  buff?: Stat;
  imageurl?: String;
}

export interface FoodPreviousValuesPromise
  extends Promise<FoodPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  buff: () => Promise<Stat>;
  imageurl: () => Promise<String>;
}

export interface FoodPreviousValuesSubscription
  extends Promise<AsyncIterator<FoodPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  buff: () => Promise<AsyncIterator<Stat>>;
  imageurl: () => Promise<AsyncIterator<String>>;
}

export interface GuideEdge {
  node: Guide;
  cursor: String;
}

export interface GuideEdgePromise extends Promise<GuideEdge>, Fragmentable {
  node: <T = GuidePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GuideEdgeSubscription
  extends Promise<AsyncIterator<GuideEdge>>,
    Fragmentable {
  node: <T = GuideSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Food {
  id: ID_Output;
  name: String;
  buff?: Stat;
  imageurl?: String;
}

export interface FoodPromise extends Promise<Food>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  pet_favorite: <T = FragmentableArray<Pet>>(args?: {
    where?: PetWhereInput;
    orderBy?: PetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  buff: () => Promise<Stat>;
  imageurl: () => Promise<String>;
}

export interface FoodSubscription
  extends Promise<AsyncIterator<Food>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  pet_favorite: <T = Promise<AsyncIterator<PetSubscription>>>(args?: {
    where?: PetWhereInput;
    orderBy?: PetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  buff: () => Promise<AsyncIterator<Stat>>;
  imageurl: () => Promise<AsyncIterator<String>>;
}

export interface FoodNullablePromise
  extends Promise<Food | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  pet_favorite: <T = FragmentableArray<Pet>>(args?: {
    where?: PetWhereInput;
    orderBy?: PetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  buff: () => Promise<Stat>;
  imageurl: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updateAt?: DateTimeOutput;
  handle: String;
  email: String;
  role: Role;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
  handle: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  password: () => Promise<String>;
  guides: <T = FragmentableArray<Guide>>(args?: {
    where?: GuideWhereInput;
    orderBy?: GuideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  handle: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  password: () => Promise<AsyncIterator<String>>;
  guides: <T = Promise<AsyncIterator<GuideSubscription>>>(args?: {
    where?: GuideWhereInput;
    orderBy?: GuideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
  handle: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  password: () => Promise<String>;
  guides: <T = FragmentableArray<Guide>>(args?: {
    where?: GuideWhereInput;
    orderBy?: GuideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GuideSubscriptionPayload {
  mutation: MutationType;
  node: Guide;
  updatedFields: String[];
  previousValues: GuidePreviousValues;
}

export interface GuideSubscriptionPayloadPromise
  extends Promise<GuideSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GuidePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GuidePreviousValuesPromise>() => T;
}

export interface GuideSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GuideSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GuideSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GuidePreviousValuesSubscription>() => T;
}

export interface FoodEdge {
  node: Food;
  cursor: String;
}

export interface FoodEdgePromise extends Promise<FoodEdge>, Fragmentable {
  node: <T = FoodPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FoodEdgeSubscription
  extends Promise<AsyncIterator<FoodEdge>>,
    Fragmentable {
  node: <T = FoodSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GuidePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updateAt?: DateTimeOutput;
  title: String;
  body: String;
}

export interface GuidePreviousValuesPromise
  extends Promise<GuidePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  body: () => Promise<String>;
}

export interface GuidePreviousValuesSubscription
  extends Promise<AsyncIterator<GuidePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface ElementConnection {
  pageInfo: PageInfo;
  edges: ElementEdge[];
}

export interface ElementConnectionPromise
  extends Promise<ElementConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ElementEdge>>() => T;
  aggregate: <T = AggregateElementPromise>() => T;
}

export interface ElementConnectionSubscription
  extends Promise<AsyncIterator<ElementConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ElementEdgeSubscription>>>() => T;
  aggregate: <T = AggregateElementSubscription>() => T;
}

export interface Pet {
  id: ID_Output;
  name: String;
  element_one_value?: Int;
  element_two_value?: Int;
  talent_cap?: Float;
  type?: PetType;
  imageurl?: String;
}

export interface PetPromise extends Promise<Pet>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  element_one: <T = ElementPromise>() => T;
  element_one_value: () => Promise<Int>;
  element_two: <T = ElementPromise>() => T;
  element_two_value: () => Promise<Int>;
  talent_cap: () => Promise<Float>;
  type: () => Promise<PetType>;
  favorite_food: <T = FoodPromise>() => T;
  area: <T = MapPromise>() => T;
  imageurl: () => Promise<String>;
}

export interface PetSubscription
  extends Promise<AsyncIterator<Pet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  element_one: <T = ElementSubscription>() => T;
  element_one_value: () => Promise<AsyncIterator<Int>>;
  element_two: <T = ElementSubscription>() => T;
  element_two_value: () => Promise<AsyncIterator<Int>>;
  talent_cap: () => Promise<AsyncIterator<Float>>;
  type: () => Promise<AsyncIterator<PetType>>;
  favorite_food: <T = FoodSubscription>() => T;
  area: <T = MapSubscription>() => T;
  imageurl: () => Promise<AsyncIterator<String>>;
}

export interface PetNullablePromise extends Promise<Pet | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  element_one: <T = ElementPromise>() => T;
  element_one_value: () => Promise<Int>;
  element_two: <T = ElementPromise>() => T;
  element_two_value: () => Promise<Int>;
  talent_cap: () => Promise<Float>;
  type: () => Promise<PetType>;
  favorite_food: <T = FoodPromise>() => T;
  area: <T = MapPromise>() => T;
  imageurl: () => Promise<String>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface MapSubscriptionPayload {
  mutation: MutationType;
  node: Map;
  updatedFields: String[];
  previousValues: MapPreviousValues;
}

export interface MapSubscriptionPayloadPromise
  extends Promise<MapSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MapPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MapPreviousValuesPromise>() => T;
}

export interface MapSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MapSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MapSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MapPreviousValuesSubscription>() => T;
}

export interface AggregatePet {
  count: Int;
}

export interface AggregatePetPromise
  extends Promise<AggregatePet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePetSubscription
  extends Promise<AsyncIterator<AggregatePet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MapPreviousValues {
  id: ID_Output;
  name: String;
  total_stage?: Int;
  previous_map?: String;
  next_map?: String;
  imageurl?: String;
}

export interface MapPreviousValuesPromise
  extends Promise<MapPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  total_stage: () => Promise<Int>;
  previous_map: () => Promise<String>;
  next_map: () => Promise<String>;
  imageurl: () => Promise<String>;
}

export interface MapPreviousValuesSubscription
  extends Promise<AsyncIterator<MapPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  total_stage: () => Promise<AsyncIterator<Int>>;
  previous_map: () => Promise<AsyncIterator<String>>;
  next_map: () => Promise<AsyncIterator<String>>;
  imageurl: () => Promise<AsyncIterator<String>>;
}

export interface MapConnection {
  pageInfo: PageInfo;
  edges: MapEdge[];
}

export interface MapConnectionPromise
  extends Promise<MapConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MapEdge>>() => T;
  aggregate: <T = AggregateMapPromise>() => T;
}

export interface MapConnectionSubscription
  extends Promise<AsyncIterator<MapConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MapEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMapSubscription>() => T;
}

export interface MonsterSkill {
  id: ID_Output;
  name: String;
  description: String;
  skill_type: SkillType[];
  combat_type: CombatType[];
  energy?: Int;
}

export interface MonsterSkillPromise
  extends Promise<MonsterSkill>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  skill_type: () => Promise<SkillType[]>;
  combat_type: () => Promise<CombatType[]>;
  energy: () => Promise<Int>;
}

export interface MonsterSkillSubscription
  extends Promise<AsyncIterator<MonsterSkill>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  skill_type: () => Promise<AsyncIterator<SkillType[]>>;
  combat_type: () => Promise<AsyncIterator<CombatType[]>>;
  energy: () => Promise<AsyncIterator<Int>>;
}

export interface MonsterSkillNullablePromise
  extends Promise<MonsterSkill | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  skill_type: () => Promise<SkillType[]>;
  combat_type: () => Promise<CombatType[]>;
  energy: () => Promise<Int>;
}

export interface Guide {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updateAt?: DateTimeOutput;
  title: String;
  body: String;
}

export interface GuidePromise extends Promise<Guide>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  owner: <T = UserPromise>() => T;
}

export interface GuideSubscription
  extends Promise<AsyncIterator<Guide>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
}

export interface GuideNullablePromise
  extends Promise<Guide | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  owner: <T = UserPromise>() => T;
}

export interface ContinentEdge {
  node: Continent;
  cursor: String;
}

export interface ContinentEdgePromise
  extends Promise<ContinentEdge>,
    Fragmentable {
  node: <T = ContinentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContinentEdgeSubscription
  extends Promise<AsyncIterator<ContinentEdge>>,
    Fragmentable {
  node: <T = ContinentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PetSubscriptionPayload {
  mutation: MutationType;
  node: Pet;
  updatedFields: String[];
  previousValues: PetPreviousValues;
}

export interface PetSubscriptionPayloadPromise
  extends Promise<PetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PetPreviousValuesPromise>() => T;
}

export interface PetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PetPreviousValuesSubscription>() => T;
}

export interface BossStruct {
  id: ID_Output;
  minion_present?: Boolean;
  AtkSpd?: Float;
}

export interface BossStructPromise extends Promise<BossStruct>, Fragmentable {
  id: () => Promise<ID_Output>;
  map: <T = MapPromise>() => T;
  boss: <T = BossPromise>() => T;
  minion_present: () => Promise<Boolean>;
  AtkSpd: () => Promise<Float>;
  skills: <T = FragmentableArray<MonsterSkill>>(args?: {
    where?: MonsterSkillWhereInput;
    orderBy?: MonsterSkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BossStructSubscription
  extends Promise<AsyncIterator<BossStruct>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  map: <T = MapSubscription>() => T;
  boss: <T = BossSubscription>() => T;
  minion_present: () => Promise<AsyncIterator<Boolean>>;
  AtkSpd: () => Promise<AsyncIterator<Float>>;
  skills: <T = Promise<AsyncIterator<MonsterSkillSubscription>>>(args?: {
    where?: MonsterSkillWhereInput;
    orderBy?: MonsterSkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BossStructNullablePromise
  extends Promise<BossStruct | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  map: <T = MapPromise>() => T;
  boss: <T = BossPromise>() => T;
  minion_present: () => Promise<Boolean>;
  AtkSpd: () => Promise<Float>;
  skills: <T = FragmentableArray<MonsterSkill>>(args?: {
    where?: MonsterSkillWhereInput;
    orderBy?: MonsterSkillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MonsterSkillPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  skill_type: SkillType[];
  combat_type: CombatType[];
  energy?: Int;
}

export interface MonsterSkillPreviousValuesPromise
  extends Promise<MonsterSkillPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  skill_type: () => Promise<SkillType[]>;
  combat_type: () => Promise<CombatType[]>;
  energy: () => Promise<Int>;
}

export interface MonsterSkillPreviousValuesSubscription
  extends Promise<AsyncIterator<MonsterSkillPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  skill_type: () => Promise<AsyncIterator<SkillType[]>>;
  combat_type: () => Promise<AsyncIterator<CombatType[]>>;
  energy: () => Promise<AsyncIterator<Int>>;
}

export interface MonsterSkillSubscriptionPayload {
  mutation: MutationType;
  node: MonsterSkill;
  updatedFields: String[];
  previousValues: MonsterSkillPreviousValues;
}

export interface MonsterSkillSubscriptionPayloadPromise
  extends Promise<MonsterSkillSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MonsterSkillPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MonsterSkillPreviousValuesPromise>() => T;
}

export interface MonsterSkillSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MonsterSkillSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MonsterSkillSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MonsterSkillPreviousValuesSubscription>() => T;
}

export interface Boss {
  id: ID_Output;
  name: String;
  element_one_value?: Int;
  element_two_value?: Int;
}

export interface BossPromise extends Promise<Boss>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  element_one: <T = ElementPromise>() => T;
  element_one_value: () => Promise<Int>;
  element_two: <T = ElementPromise>() => T;
  element_two_value: () => Promise<Int>;
  map_found: <T = FragmentableArray<Map>>(args?: {
    where?: MapWhereInput;
    orderBy?: MapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  continent_found: <T = FragmentableArray<Continent>>(args?: {
    where?: ContinentWhereInput;
    orderBy?: ContinentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BossSubscription
  extends Promise<AsyncIterator<Boss>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  element_one: <T = ElementSubscription>() => T;
  element_one_value: () => Promise<AsyncIterator<Int>>;
  element_two: <T = ElementSubscription>() => T;
  element_two_value: () => Promise<AsyncIterator<Int>>;
  map_found: <T = Promise<AsyncIterator<MapSubscription>>>(args?: {
    where?: MapWhereInput;
    orderBy?: MapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  continent_found: <T = Promise<AsyncIterator<ContinentSubscription>>>(args?: {
    where?: ContinentWhereInput;
    orderBy?: ContinentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BossNullablePromise
  extends Promise<Boss | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  element_one: <T = ElementPromise>() => T;
  element_one_value: () => Promise<Int>;
  element_two: <T = ElementPromise>() => T;
  element_two_value: () => Promise<Int>;
  map_found: <T = FragmentableArray<Map>>(args?: {
    where?: MapWhereInput;
    orderBy?: MapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  continent_found: <T = FragmentableArray<Continent>>(args?: {
    where?: ContinentWhereInput;
    orderBy?: ContinentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateElement {
  count: Int;
}

export interface AggregateElementPromise
  extends Promise<AggregateElement>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateElementSubscription
  extends Promise<AsyncIterator<AggregateElement>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Element {
  id: ID_Output;
  name: ElementType;
  weakness?: ElementType;
  effective?: ElementType;
}

export interface ElementPromise extends Promise<Element>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ElementType>;
  weakness: () => Promise<ElementType>;
  effective: () => Promise<ElementType>;
}

export interface ElementSubscription
  extends Promise<AsyncIterator<Element>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<ElementType>>;
  weakness: () => Promise<AsyncIterator<ElementType>>;
  effective: () => Promise<AsyncIterator<ElementType>>;
}

export interface ElementNullablePromise
  extends Promise<Element | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ElementType>;
  weakness: () => Promise<ElementType>;
  effective: () => Promise<ElementType>;
}

export interface MonsterSkillEdge {
  node: MonsterSkill;
  cursor: String;
}

export interface MonsterSkillEdgePromise
  extends Promise<MonsterSkillEdge>,
    Fragmentable {
  node: <T = MonsterSkillPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MonsterSkillEdgeSubscription
  extends Promise<AsyncIterator<MonsterSkillEdge>>,
    Fragmentable {
  node: <T = MonsterSkillSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Guide",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Skill",
    embedded: false
  },
  {
    name: "MonsterSkill",
    embedded: false
  },
  {
    name: "Class",
    embedded: false
  },
  {
    name: "Boss",
    embedded: false
  },
  {
    name: "BossStruct",
    embedded: false
  },
  {
    name: "Map",
    embedded: false
  },
  {
    name: "Continent",
    embedded: false
  },
  {
    name: "Pet",
    embedded: false
  },
  {
    name: "Food",
    embedded: false
  },
  {
    name: "Element",
    embedded: false
  },
  {
    name: "SkillType",
    embedded: false
  },
  {
    name: "CombatType",
    embedded: false
  },
  {
    name: "ElementType",
    embedded: false
  },
  {
    name: "PetType",
    embedded: false
  },
  {
    name: "Rarity",
    embedded: false
  },
  {
    name: "Hero",
    embedded: false
  },
  {
    name: "Stat",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
